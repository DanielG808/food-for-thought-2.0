/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/me/route";
exports.ids = ["app/api/me/route"];
exports.modules = {

/***/ "(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fme%2Froute&page=%2Fapi%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fme%2Froute&page=%2Fapi%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/../node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/../node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/../node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/../node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/../node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/../node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/../node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/../node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_dang_Documents_web_dev_projects_food_for_thought_2_0_web_src_app_api_me_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/me/route.ts */ \"(rsc)/./src/app/api/me/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/me/route\",\n        pathname: \"/api/me\",\n        filename: \"route\",\n        bundlePath: \"app/api/me/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\dang\\\\Documents\\\\web-dev-projects\\\\food-for-thought-2.0\\\\web\\\\src\\\\app\\\\api\\\\me\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_dang_Documents_web_dev_projects_food_for_thought_2_0_web_src_app_api_me_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/me/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fme%2Froute&page=%2Fapi%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/../packages/db/generated/prisma/index.js":
/*!************************************************!*\
  !*** ../packages/db/generated/prisma/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, NotFoundError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/../packages/db/generated/prisma/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 5.22.0\n * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2\n */ Prisma.prismaVersion = {\n    client: \"5.22.0\",\n    engine: \"605197351a3c8bdd595af2d2a9bc3025bca48ea2\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.NotFoundError = NotFoundError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: 'ReadUncommitted',\n    ReadCommitted: 'ReadCommitted',\n    RepeatableRead: 'RepeatableRead',\n    Serializable: 'Serializable'\n});\nexports.Prisma.UserScalarFieldEnum = {\n    id: 'id',\n    clerkId: 'clerkId',\n    email: 'email',\n    username: 'username',\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n};\nexports.Prisma.SortOrder = {\n    asc: 'asc',\n    desc: 'desc'\n};\nexports.Prisma.QueryMode = {\n    default: 'default',\n    insensitive: 'insensitive'\n};\nexports.Prisma.ModelName = {\n    User: 'User'\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"C:\\\\Users\\\\dang\\\\Documents\\\\web-dev-projects\\\\food-for-thought-2.0\\\\packages\\\\db\\\\generated\\\\prisma\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"windows\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"C:\\\\Users\\\\dang\\\\Documents\\\\web-dev-projects\\\\food-for-thought-2.0\\\\packages\\\\db\\\\prisma\\\\schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null,\n        \"schemaEnvPath\": \"../../.env\"\n    },\n    \"relativePath\": \"../../prisma\",\n    \"clientVersion\": \"5.22.0\",\n    \"engineVersion\": \"605197351a3c8bdd595af2d2a9bc3025bca48ea2\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"postgresql\",\n    \"postinstall\": false,\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n  output   = \\\"../generated/prisma\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel User {\\n  id        String   @id @default(cuid())\\n  clerkId   String   @unique\\n  email     String   @unique\\n  username  String   @unique\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n\\n  @@index([clerkId])\\n}\\n\",\n    \"inlineSchemaHash\": \"cfc22d036259fa6f7fa7b76d992d480ae1f58ac322bebc494794a25c52f439e5\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {\n    const alternativePaths = [\n        \"generated/prisma\",\n        \"prisma\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse(\"{\\\"models\\\":{\\\"User\\\":{\\\"dbName\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"clerkId\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"username\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false}},\\\"enums\\\":{},\\\"types\\\":{}}\");\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/../packages/db/generated/prisma/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"query_engine-windows.dll.node\");\npath.join(process.cwd(), \"generated/prisma/query_engine-windows.dll.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"generated/prisma/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../packages/db/generated/prisma/index.js\n");

/***/ }),

/***/ "(rsc)/../packages/db/generated/prisma/runtime/library.js":
/*!**********************************************************!*\
  !*** ../packages/db/generated/prisma/runtime/library.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar eu = Object.create;\nvar Nr = Object.defineProperty;\nvar tu = Object.getOwnPropertyDescriptor;\nvar ru = Object.getOwnPropertyNames;\nvar nu = Object.getPrototypeOf, iu = Object.prototype.hasOwnProperty;\nvar Z = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports), Ut = (e, t)=>{\n    for(var r in t)Nr(e, r, {\n        get: t[r],\n        enumerable: !0\n    });\n}, ho = (e, t, r, n)=>{\n    if (t && typeof t == \"object\" || typeof t == \"function\") for (let i of ru(t))!iu.call(e, i) && i !== r && Nr(e, i, {\n        get: ()=>t[i],\n        enumerable: !(n = tu(t, i)) || n.enumerable\n    });\n    return e;\n};\nvar k = (e, t, r)=>(r = e != null ? eu(nu(e)) : {}, ho(t || !e || !e.__esModule ? Nr(r, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : r, e)), ou = (e)=>ho(Nr({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar jo = Z((pf, Zn)=>{\n    \"use strict\";\n    var v = Zn.exports;\n    Zn.exports.default = v;\n    var D = \"\\x1B[\", Ht = \"\\x1B]\", ft = \"\\x07\", Jr = \";\", qo = process.env.TERM_PROGRAM === \"Apple_Terminal\";\n    v.cursorTo = (e, t)=>{\n        if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n        return typeof t != \"number\" ? D + (e + 1) + \"G\" : D + (t + 1) + \";\" + (e + 1) + \"H\";\n    };\n    v.cursorMove = (e, t)=>{\n        if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n        let r = \"\";\n        return e < 0 ? r += D + -e + \"D\" : e > 0 && (r += D + e + \"C\"), t < 0 ? r += D + -t + \"A\" : t > 0 && (r += D + t + \"B\"), r;\n    };\n    v.cursorUp = (e = 1)=>D + e + \"A\";\n    v.cursorDown = (e = 1)=>D + e + \"B\";\n    v.cursorForward = (e = 1)=>D + e + \"C\";\n    v.cursorBackward = (e = 1)=>D + e + \"D\";\n    v.cursorLeft = D + \"G\";\n    v.cursorSavePosition = qo ? \"\\x1B7\" : D + \"s\";\n    v.cursorRestorePosition = qo ? \"\\x1B8\" : D + \"u\";\n    v.cursorGetPosition = D + \"6n\";\n    v.cursorNextLine = D + \"E\";\n    v.cursorPrevLine = D + \"F\";\n    v.cursorHide = D + \"?25l\";\n    v.cursorShow = D + \"?25h\";\n    v.eraseLines = (e)=>{\n        let t = \"\";\n        for(let r = 0; r < e; r++)t += v.eraseLine + (r < e - 1 ? v.cursorUp() : \"\");\n        return e && (t += v.cursorLeft), t;\n    };\n    v.eraseEndLine = D + \"K\";\n    v.eraseStartLine = D + \"1K\";\n    v.eraseLine = D + \"2K\";\n    v.eraseDown = D + \"J\";\n    v.eraseUp = D + \"1J\";\n    v.eraseScreen = D + \"2J\";\n    v.scrollUp = D + \"S\";\n    v.scrollDown = D + \"T\";\n    v.clearScreen = \"\\x1Bc\";\n    v.clearTerminal = process.platform === \"win32\" ? `${v.eraseScreen}${D}0f` : `${v.eraseScreen}${D}3J${D}H`;\n    v.beep = ft;\n    v.link = (e, t)=>[\n            Ht,\n            \"8\",\n            Jr,\n            Jr,\n            t,\n            ft,\n            e,\n            Ht,\n            \"8\",\n            Jr,\n            Jr,\n            ft\n        ].join(\"\");\n    v.image = (e, t = {})=>{\n        let r = `${Ht}1337;File=inline=1`;\n        return t.width && (r += `;width=${t.width}`), t.height && (r += `;height=${t.height}`), t.preserveAspectRatio === !1 && (r += \";preserveAspectRatio=0\"), r + \":\" + e.toString(\"base64\") + ft;\n    };\n    v.iTerm = {\n        setCwd: (e = process.cwd())=>`${Ht}50;CurrentDir=${e}${ft}`,\n        annotation: (e, t = {})=>{\n            let r = `${Ht}1337;`, n = typeof t.x < \"u\", i = typeof t.y < \"u\";\n            if ((n || i) && !(n && i && typeof t.length < \"u\")) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n            return e = e.replace(/\\|/g, \"\"), r += t.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", t.length > 0 ? r += (n ? [\n                e,\n                t.length,\n                t.x,\n                t.y\n            ] : [\n                t.length,\n                e\n            ]).join(\"|\") : r += e, r + ft;\n        }\n    };\n});\nvar Xn = Z((df, Vo)=>{\n    \"use strict\";\n    Vo.exports = (e, t = process.argv)=>{\n        let r = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = t.indexOf(r + e), i = t.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar Go = Z((mf, Uo)=>{\n    \"use strict\";\n    var Gu = __webpack_require__(/*! os */ \"os\"), Bo = __webpack_require__(/*! tty */ \"tty\"), de = Xn(), { env: Q } = process, Qe;\n    de(\"no-color\") || de(\"no-colors\") || de(\"color=false\") || de(\"color=never\") ? Qe = 0 : (de(\"color\") || de(\"colors\") || de(\"color=true\") || de(\"color=always\")) && (Qe = 1);\n    \"FORCE_COLOR\" in Q && (Q.FORCE_COLOR === \"true\" ? Qe = 1 : Q.FORCE_COLOR === \"false\" ? Qe = 0 : Qe = Q.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(Q.FORCE_COLOR, 10), 3));\n    function ei(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function ti(e, t) {\n        if (Qe === 0) return 0;\n        if (de(\"color=16m\") || de(\"color=full\") || de(\"color=truecolor\")) return 3;\n        if (de(\"color=256\")) return 2;\n        if (e && !t && Qe === void 0) return 0;\n        let r = Qe || 0;\n        if (Q.TERM === \"dumb\") return r;\n        if (process.platform === \"win32\") {\n            let n = Gu.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in Q) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in Q) || Q.CI_NAME === \"codeship\" ? 1 : r;\n        if (\"TEAMCITY_VERSION\" in Q) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(Q.TEAMCITY_VERSION) ? 1 : 0;\n        if (Q.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in Q) {\n            let n = parseInt((Q.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(Q.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(Q.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Q.TERM) || \"COLORTERM\" in Q ? 1 : r;\n    }\n    function Qu(e) {\n        let t = ti(e, e && e.isTTY);\n        return ei(t);\n    }\n    Uo.exports = {\n        supportsColor: Qu,\n        stdout: ei(ti(!0, Bo.isatty(1))),\n        stderr: ei(ti(!0, Bo.isatty(2)))\n    };\n});\nvar Wo = Z((ff, Jo)=>{\n    \"use strict\";\n    var Ju = Go(), gt = Xn();\n    function Qo(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let r = /(\\d{1,2})(\\d{2})/.exec(e);\n            return {\n                major: 0,\n                minor: parseInt(r[1], 10),\n                patch: parseInt(r[2], 10)\n            };\n        }\n        let t = (e || \"\").split(\".\").map((r)=>parseInt(r, 10));\n        return {\n            major: t[0],\n            minor: t[1],\n            patch: t[2]\n        };\n    }\n    function ri(e) {\n        let { env: t } = process;\n        if (\"FORCE_HYPERLINK\" in t) return !(t.FORCE_HYPERLINK.length > 0 && parseInt(t.FORCE_HYPERLINK, 10) === 0);\n        if (gt(\"no-hyperlink\") || gt(\"no-hyperlinks\") || gt(\"hyperlink=false\") || gt(\"hyperlink=never\")) return !1;\n        if (gt(\"hyperlink=true\") || gt(\"hyperlink=always\") || \"NETLIFY\" in t) return !0;\n        if (!Ju.supportsColor(e) || e && !e.isTTY || process.platform === \"win32\" || \"CI\" in t || \"TEAMCITY_VERSION\" in t) return !1;\n        if (\"TERM_PROGRAM\" in t) {\n            let r = Qo(t.TERM_PROGRAM_VERSION);\n            switch(t.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return r.major === 3 ? r.minor >= 1 : r.major > 3;\n                case \"WezTerm\":\n                    return r.major >= 20200620;\n                case \"vscode\":\n                    return r.major > 1 || r.major === 1 && r.minor >= 72;\n            }\n        }\n        if (\"VTE_VERSION\" in t) {\n            if (t.VTE_VERSION === \"0.50.0\") return !1;\n            let r = Qo(t.VTE_VERSION);\n            return r.major > 0 || r.minor >= 50;\n        }\n        return !1;\n    }\n    Jo.exports = {\n        supportsHyperlink: ri,\n        stdout: ri(process.stdout),\n        stderr: ri(process.stderr)\n    };\n});\nvar Ko = Z((gf, Kt)=>{\n    \"use strict\";\n    var Wu = jo(), ni = Wo(), Ho = (e, t, { target: r = \"stdout\", ...n } = {})=>ni[r] ? Wu.link(e, t) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, t) : `${e} (\\u200B${t}\\u200B)`;\n    Kt.exports = (e, t, r = {})=>Ho(e, t, r);\n    Kt.exports.stderr = (e, t, r = {})=>Ho(e, t, {\n            target: \"stderr\",\n            ...r\n        });\n    Kt.exports.isSupported = ni.stdout;\n    Kt.exports.stderr.isSupported = ni.stderr;\n});\nvar oi = Z((Rf, Hu)=>{\n    Hu.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"605197351a3c8bdd595af2d2a9bc3025bca48ea2\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.34\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar si = Z((Wr)=>{\n    \"use strict\";\n    Object.defineProperty(Wr, \"__esModule\", {\n        value: !0\n    });\n    Wr.enginesVersion = void 0;\n    Wr.enginesVersion = oi().prisma.enginesVersion;\n});\nvar Xo = Z((Gf, Yu)=>{\n    Yu.exports = {\n        name: \"dotenv\",\n        version: \"16.0.3\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                require: \"./lib/main.js\",\n                types: \"./lib/main.d.ts\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            \"lint-readme\": \"standard-markdown\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap tests/*.js --100 -Rspec\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^17.0.9\",\n            decache: \"^4.6.1\",\n            dtslint: \"^3.7.0\",\n            sinon: \"^12.0.1\",\n            standard: \"^16.0.4\",\n            \"standard-markdown\": \"^7.1.0\",\n            \"standard-version\": \"^9.3.2\",\n            tap: \"^15.1.6\",\n            tar: \"^6.1.11\",\n            typescript: \"^4.5.4\"\n        },\n        engines: {\n            node: \">=12\"\n        }\n    };\n});\nvar ts = Z((Qf, Kr)=>{\n    \"use strict\";\n    var Zu = __webpack_require__(/*! fs */ \"fs\"), es = __webpack_require__(/*! path */ \"path\"), Xu = __webpack_require__(/*! os */ \"os\"), ec = Xo(), tc = ec.version, rc = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function nc(e) {\n        let t = {}, r = e.toString();\n        r = r.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = rc.exec(r)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), t[i] = o;\n        }\n        return t;\n    }\n    function ci(e) {\n        console.log(`[dotenv@${tc}][DEBUG] ${e}`);\n    }\n    function ic(e) {\n        return e[0] === \"~\" ? es.join(Xu.homedir(), e.slice(1)) : e;\n    }\n    function oc(e) {\n        let t = es.resolve(process.cwd(), \".env\"), r = \"utf8\", n = !!(e && e.debug), i = !!(e && e.override);\n        e && (e.path != null && (t = ic(e.path)), e.encoding != null && (r = e.encoding));\n        try {\n            let o = Hr.parse(Zu.readFileSync(t, {\n                encoding: r\n            }));\n            return Object.keys(o).forEach(function(s) {\n                Object.prototype.hasOwnProperty.call(process.env, s) ? (i === !0 && (process.env[s] = o[s]), n && ci(i === !0 ? `\"${s}\" is already defined in \\`process.env\\` and WAS overwritten` : `\"${s}\" is already defined in \\`process.env\\` and was NOT overwritten`)) : process.env[s] = o[s];\n            }), {\n                parsed: o\n            };\n        } catch (o) {\n            return n && ci(`Failed to load ${t} ${o.message}`), {\n                error: o\n            };\n        }\n    }\n    var Hr = {\n        config: oc,\n        parse: nc\n    };\n    Kr.exports.config = Hr.config;\n    Kr.exports.parse = Hr.parse;\n    Kr.exports = Hr;\n});\nvar as = Z((Zf, ss)=>{\n    \"use strict\";\n    ss.exports = (e)=>{\n        let t = e.match(/^[ \\t]*(?=\\S)/gm);\n        return t ? t.reduce((r, n)=>Math.min(r, n.length), 1 / 0) : 0;\n    };\n});\nvar us = Z((Xf, ls)=>{\n    \"use strict\";\n    var uc = as();\n    ls.exports = (e)=>{\n        let t = uc(e);\n        if (t === 0) return e;\n        let r = new RegExp(`^[ \\\\t]{${t}}`, \"gm\");\n        return e.replace(r, \"\");\n    };\n});\nvar fi = Z((og, cs)=>{\n    \"use strict\";\n    cs.exports = (e, t = 1, r)=>{\n        if (r = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...r\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof t != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof t}\\``);\n        if (typeof r.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof r.indent}\\``);\n        if (t === 0) return e;\n        let n = r.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, r.indent.repeat(t));\n    };\n});\nvar fs = Z((lg, ms)=>{\n    \"use strict\";\n    ms.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let t = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(t, e ? void 0 : \"g\");\n    };\n});\nvar bi = Z((ug, gs)=>{\n    \"use strict\";\n    var yc = fs();\n    gs.exports = (e)=>typeof e == \"string\" ? e.replace(yc(), \"\") : e;\n});\nvar hs = Z((dg, Zr)=>{\n    \"use strict\";\n    Zr.exports = (e = {})=>{\n        let t;\n        if (e.repoUrl) t = e.repoUrl;\n        else if (e.user && e.repo) t = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let r = new URL(`${t}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                r.searchParams.set(i, o);\n            }\n        }\n        return r.toString();\n    };\n    Zr.exports.default = Zr.exports;\n});\nvar Ai = Z((Th, $s)=>{\n    \"use strict\";\n    $s.exports = function() {\n        function e(t, r, n, i, o) {\n            return t < r || n < r ? t > n ? n + 1 : t + 1 : i === o ? r : r + 1;\n        }\n        return function(t, r) {\n            if (t === r) return 0;\n            if (t.length > r.length) {\n                var n = t;\n                t = r, r = n;\n            }\n            for(var i = t.length, o = r.length; i > 0 && t.charCodeAt(i - 1) === r.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && t.charCodeAt(s) === r.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, g, h, O, T, S, C, E = [];\n            for(l = 0; l < i; l++)E.push(l + 1), E.push(t.charCodeAt(s + l));\n            for(var me = E.length - 1; a < o - 3;)for(O = r.charCodeAt(s + (u = a)), T = r.charCodeAt(s + (c = a + 1)), S = r.charCodeAt(s + (p = a + 2)), C = r.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2)g = E[l], h = E[l + 1], u = e(g, u, c, O, h), c = e(u, c, p, T, h), p = e(c, p, d, S, h), f = e(p, d, f, C, h), E[l] = f, d = p, p = c, c = u, u = g;\n            for(; a < o;)for(O = r.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2)g = E[l], E[l] = f = e(g, u, f, O, E[l + 1]), u = g;\n            return f;\n        };\n    }();\n});\nvar Nm = {};\nUt(Nm, {\n    Debug: ()=>Gn,\n    Decimal: ()=>xe,\n    Extensions: ()=>jn,\n    MetricsClient: ()=>Dt,\n    NotFoundError: ()=>Le,\n    PrismaClientInitializationError: ()=>R,\n    PrismaClientKnownRequestError: ()=>V,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>B,\n    PrismaClientValidationError: ()=>J,\n    Public: ()=>Vn,\n    Sql: ()=>oe,\n    defineDmmfProperty: ()=>ua,\n    deserializeJsonResponse: ()=>wt,\n    dmmfToRuntimeDataModel: ()=>la,\n    empty: ()=>ma,\n    getPrismaClient: ()=>Yl,\n    getRuntime: ()=>In,\n    join: ()=>da,\n    makeStrictEnum: ()=>Zl,\n    makeTypedQueryFactory: ()=>ca,\n    objectEnumValues: ()=>yn,\n    raw: ()=>ji,\n    serializeJsonQuery: ()=>vn,\n    skip: ()=>Pn,\n    sqltag: ()=>Vi,\n    warnEnvConflicts: ()=>Xl,\n    warnOnce: ()=>tr\n});\nmodule.exports = ou(Nm);\nvar jn = {};\nUt(jn, {\n    defineExtension: ()=>yo,\n    getExtensionContext: ()=>bo\n});\nfunction yo(e) {\n    return typeof e == \"function\" ? e : (t)=>t.$extends(e);\n}\nfunction bo(e) {\n    return e;\n}\nvar Vn = {};\nUt(Vn, {\n    validator: ()=>Eo\n});\nfunction Eo(...e) {\n    return (t)=>t;\n}\nvar Mr = {};\nUt(Mr, {\n    $: ()=>To,\n    bgBlack: ()=>gu,\n    bgBlue: ()=>Eu,\n    bgCyan: ()=>xu,\n    bgGreen: ()=>yu,\n    bgMagenta: ()=>wu,\n    bgRed: ()=>hu,\n    bgWhite: ()=>Pu,\n    bgYellow: ()=>bu,\n    black: ()=>pu,\n    blue: ()=>rt,\n    bold: ()=>H,\n    cyan: ()=>De,\n    dim: ()=>Oe,\n    gray: ()=>Gt,\n    green: ()=>qe,\n    grey: ()=>fu,\n    hidden: ()=>uu,\n    inverse: ()=>lu,\n    italic: ()=>au,\n    magenta: ()=>du,\n    red: ()=>ce,\n    reset: ()=>su,\n    strikethrough: ()=>cu,\n    underline: ()=>X,\n    white: ()=>mu,\n    yellow: ()=>ke\n});\nvar Bn, wo, xo, Po, vo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: Bn, NODE_DISABLE_COLORS: wo, NO_COLOR: xo, TERM: Po } = process.env || {}, vo = process.stdout && process.stdout.isTTY);\nvar To = {\n    enabled: !wo && xo == null && Po !== \"dumb\" && (Bn != null && Bn !== \"0\" || vo)\n};\nfunction M(e, t) {\n    let r = new RegExp(`\\\\x1b\\\\[${t}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${t}m`;\n    return function(o) {\n        return !To.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(r, i + n) : o) + i;\n    };\n}\nvar su = M(0, 0), H = M(1, 22), Oe = M(2, 22), au = M(3, 23), X = M(4, 24), lu = M(7, 27), uu = M(8, 28), cu = M(9, 29), pu = M(30, 39), ce = M(31, 39), qe = M(32, 39), ke = M(33, 39), rt = M(34, 39), du = M(35, 39), De = M(36, 39), mu = M(37, 39), Gt = M(90, 39), fu = M(90, 39), gu = M(40, 49), hu = M(41, 49), yu = M(42, 49), bu = M(43, 49), Eu = M(44, 49), wu = M(45, 49), xu = M(46, 49), Pu = M(47, 49);\nvar vu = 100, Ro = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Qt = [], Co = Date.now(), Tu = 0, Un = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= Un.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= Un.DEBUG_COLORS ? Un.DEBUG_COLORS === \"true\" : !0;\nvar Jt = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let t = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), r = t.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = t.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return r && !n;\n    },\n    log: (...e)=>{\n        let [t, r, ...n] = e;\n        (console.warn ?? console.log)(`${t} ${r}`, ...n);\n    },\n    formatters: {}\n};\nfunction Ru(e) {\n    let t = {\n        color: Ro[Tu++ % Ro.length],\n        enabled: Jt.enabled(e),\n        namespace: e,\n        log: Jt.log,\n        extend: ()=>{}\n    }, r = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = t;\n        if (n.length !== 0 && Qt.push([\n            o,\n            ...n\n        ]), Qt.length > vu && Qt.shift(), Jt.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Cu(c)), u = `+${Date.now() - Co}ms`;\n            Co = Date.now(), globalThis.DEBUG_COLORS ? a(Mr[s](H(o)), ...l, Mr[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(r, {\n        get: (n, i)=>t[i],\n        set: (n, i, o)=>t[i] = o\n    });\n}\nvar Gn = new Proxy(Ru, {\n    get: (e, t)=>Jt[t],\n    set: (e, t, r)=>Jt[t] = r\n});\nfunction Cu(e, t = 2) {\n    let r = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (r.has(i)) return \"[Circular *]\";\n            r.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, t);\n}\nfunction So(e = 7500) {\n    let t = Qt.map(([r, ...n])=>`${r} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return t.length < e ? t : t.slice(-e);\n}\nfunction Ao() {\n    Qt.length = 0;\n}\nvar L = Gn;\nvar Io = k(__webpack_require__(/*! fs */ \"fs\"));\nfunction Qn() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && Io.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar Jn = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar $r = \"libquery_engine\";\nfunction qr(e, t) {\n    let r = t === \"url\";\n    return e.includes(\"windows\") ? r ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? r ? `${$r}.dylib.node` : `${$r}-${e}.dylib.node` : r ? `${$r}.so.node` : `${$r}-${e}.so.node`;\n}\nvar _o = k(__webpack_require__(/*! child_process */ \"child_process\")), zn = k(__webpack_require__(/*! fs/promises */ \"fs/promises\")), Gr = k(__webpack_require__(/*! os */ \"os\"));\nvar _e = Symbol.for(\"@ts-pattern/matcher\"), Su = Symbol.for(\"@ts-pattern/isVariadic\"), Vr = \"@ts-pattern/anonymous-select-key\", Wn = (e)=>!!(e && typeof e == \"object\"), jr = (e)=>e && !!e[_e], Ee = (e, t, r)=>{\n    if (jr(e)) {\n        let n = e[_e](), { matched: i, selections: o } = n.match(t);\n        return i && o && Object.keys(o).forEach((s)=>r(s, o[s])), i;\n    }\n    if (Wn(e)) {\n        if (!Wn(t)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(t)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                jr(a) && a[Su] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (t.length < n.length + i.length) return !1;\n                let s = t.slice(0, n.length), a = i.length === 0 ? [] : t.slice(-i.length), l = t.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Ee(u, s[c], r)) && i.every((u, c)=>Ee(u, a[c], r)) && (o.length === 0 || Ee(o[0], l, r));\n            }\n            return e.length === t.length && e.every((s, a)=>Ee(s, t[a], r));\n        }\n        return Object.keys(e).every((n)=>{\n            let i = e[n];\n            return (n in t || jr(o = i) && o[_e]().matcherType === \"optional\") && Ee(i, t[n], r);\n            var o;\n        });\n    }\n    return Object.is(t, e);\n}, Ge = (e)=>{\n    var t, r, n;\n    return Wn(e) ? jr(e) ? (t = (r = (n = e[_e]()).getSelectionKeys) == null ? void 0 : r.call(n)) != null ? t : [] : Array.isArray(e) ? Wt(e, Ge) : Wt(Object.values(e), Ge) : [];\n}, Wt = (e, t)=>e.reduce((r, n)=>r.concat(t(n)), []);\nfunction pe(e) {\n    return Object.assign(e, {\n        optional: ()=>Au(e),\n        and: (t)=>j(e, t),\n        or: (t)=>Iu(e, t),\n        select: (t)=>t === void 0 ? Oo(e) : Oo(t, e)\n    });\n}\nfunction Au(e) {\n    return pe({\n        [_e]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return t === void 0 ? (Ge(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: r\n                    }) : {\n                        matched: Ee(e, t, n),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction j(...e) {\n    return pe({\n        [_e]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Ee(i, t, n)),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Wt(e, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Iu(...e) {\n    return pe({\n        [_e]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return Wt(e, Ge).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Ee(i, t, n)),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Wt(e, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction I(e) {\n    return {\n        [_e]: ()=>({\n                match: (t)=>({\n                        matched: !!e(t)\n                    })\n            })\n    };\n}\nfunction Oo(...e) {\n    let t = typeof e[0] == \"string\" ? e[0] : void 0, r = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return pe({\n        [_e]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [t ?? Vr]: n\n                    };\n                    return {\n                        matched: r === void 0 || Ee(r, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        t ?? Vr\n                    ].concat(r === void 0 ? [] : Ge(r))\n            })\n    });\n}\nfunction ye(e) {\n    return typeof e == \"number\";\n}\nfunction je(e) {\n    return typeof e == \"string\";\n}\nfunction Ve(e) {\n    return typeof e == \"bigint\";\n}\nvar Km = pe(I(function(e) {\n    return !0;\n}));\nvar Be = (e)=>Object.assign(pe(e), {\n        startsWith: (t)=>{\n            return Be(j(e, (r = t, I((n)=>je(n) && n.startsWith(r)))));\n            var r;\n        },\n        endsWith: (t)=>{\n            return Be(j(e, (r = t, I((n)=>je(n) && n.endsWith(r)))));\n            var r;\n        },\n        minLength: (t)=>Be(j(e, ((r)=>I((n)=>je(n) && n.length >= r))(t))),\n        length: (t)=>Be(j(e, ((r)=>I((n)=>je(n) && n.length === r))(t))),\n        maxLength: (t)=>Be(j(e, ((r)=>I((n)=>je(n) && n.length <= r))(t))),\n        includes: (t)=>{\n            return Be(j(e, (r = t, I((n)=>je(n) && n.includes(r)))));\n            var r;\n        },\n        regex: (t)=>{\n            return Be(j(e, (r = t, I((n)=>je(n) && !!n.match(r)))));\n            var r;\n        }\n    }), zm = Be(I(je)), be = (e)=>Object.assign(pe(e), {\n        between: (t, r)=>be(j(e, ((n, i)=>I((o)=>ye(o) && n <= o && i >= o))(t, r))),\n        lt: (t)=>be(j(e, ((r)=>I((n)=>ye(n) && n < r))(t))),\n        gt: (t)=>be(j(e, ((r)=>I((n)=>ye(n) && n > r))(t))),\n        lte: (t)=>be(j(e, ((r)=>I((n)=>ye(n) && n <= r))(t))),\n        gte: (t)=>be(j(e, ((r)=>I((n)=>ye(n) && n >= r))(t))),\n        int: ()=>be(j(e, I((t)=>ye(t) && Number.isInteger(t)))),\n        finite: ()=>be(j(e, I((t)=>ye(t) && Number.isFinite(t)))),\n        positive: ()=>be(j(e, I((t)=>ye(t) && t > 0))),\n        negative: ()=>be(j(e, I((t)=>ye(t) && t < 0)))\n    }), Ym = be(I(ye)), Ue = (e)=>Object.assign(pe(e), {\n        between: (t, r)=>Ue(j(e, ((n, i)=>I((o)=>Ve(o) && n <= o && i >= o))(t, r))),\n        lt: (t)=>Ue(j(e, ((r)=>I((n)=>Ve(n) && n < r))(t))),\n        gt: (t)=>Ue(j(e, ((r)=>I((n)=>Ve(n) && n > r))(t))),\n        lte: (t)=>Ue(j(e, ((r)=>I((n)=>Ve(n) && n <= r))(t))),\n        gte: (t)=>Ue(j(e, ((r)=>I((n)=>Ve(n) && n >= r))(t))),\n        positive: ()=>Ue(j(e, I((t)=>Ve(t) && t > 0))),\n        negative: ()=>Ue(j(e, I((t)=>Ve(t) && t < 0)))\n    }), Zm = Ue(I(Ve)), Xm = pe(I(function(e) {\n    return typeof e == \"boolean\";\n})), ef = pe(I(function(e) {\n    return typeof e == \"symbol\";\n})), tf = pe(I(function(e) {\n    return e == null;\n})), rf = pe(I(function(e) {\n    return e != null;\n}));\nvar Hn = {\n    matched: !1,\n    value: void 0\n};\nfunction mt(e) {\n    return new Kn(e, Hn);\n}\nvar Kn = class e {\n    constructor(t, r){\n        this.input = void 0, this.state = void 0, this.input = t, this.state = r;\n    }\n    with(...t) {\n        if (this.state.matched) return this;\n        let r = t[t.length - 1], n = [\n            t[0]\n        ], i;\n        t.length === 3 && typeof t[1] == \"function\" ? i = t[1] : t.length > 2 && n.push(...t.slice(1, t.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Ee(u, this.input, a)) || i && !i(this.input) ? Hn : {\n            matched: !0,\n            value: r(o ? Vr in s ? s[Vr] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(t, r) {\n        if (this.state.matched) return this;\n        let n = !!t(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: r(this.input, this.input)\n        } : Hn);\n    }\n    otherwise(t) {\n        return this.state.matched ? this.state.value : t(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        let t;\n        try {\n            t = JSON.stringify(this.input);\n        } catch  {\n            t = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t}`);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar Fo = __webpack_require__(/*! util */ \"util\");\nvar Ou = {\n    warn: ke(\"prisma:warn\")\n}, ku = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Br(e, ...t) {\n    ku.warn() && console.warn(`${Ou.warn} ${e}`, ...t);\n}\nvar Du = (0, Fo.promisify)(_o.default.exec), te = L(\"prisma:get-platform\"), _u = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Lo() {\n    let e = Gr.default.platform(), t = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Qr(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: t\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: t\n    };\n    let r = await Lu(), n = await Uu(), i = Mu({\n        arch: t,\n        archFromUname: n,\n        familyDistro: r.familyDistro\n    }), { libssl: o } = await $u(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: t,\n        archFromUname: n,\n        ...r\n    };\n}\nfunction Fu(e) {\n    let t = /^ID=\"?([^\"\\n]*)\"?$/im, r = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = t.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = r.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = mt({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return te(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function Lu() {\n    let e = \"/etc/os-release\";\n    try {\n        let t = await zn.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return Fu(t);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction Nu(e) {\n    let t = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (t) {\n        let r = `${t[1]}.x`;\n        return No(r);\n    }\n}\nfunction ko(e) {\n    let t = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (t) {\n        let r = `${t[1]}${t[2] ?? \".0\"}.x`;\n        return No(r);\n    }\n}\nfunction No(e) {\n    let t = (()=>{\n        if ($o(e)) return e;\n        let r = e.split(\".\");\n        return r[1] = \"0\", r.join(\".\");\n    })();\n    if (_u.includes(t)) return t;\n}\nfunction Mu(e) {\n    return mt(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(te('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: t })=>(te('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${t}-linux-gnu`,\n            `/lib/${t}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(te('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: t, arch: r, archFromUname: n })=>(te(`Don't know any platform-specific paths for \"${t}\" on ${r} (${n})`), []));\n}\nasync function $u(e) {\n    let t = 'grep -v \"libssl.so.0\"', r = await Do(e);\n    if (r) {\n        te(`Found libssl.so file using platform-specific paths: ${r}`);\n        let o = ko(r);\n        if (te(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    te('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Qr(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${t}`);\n    if (n || (n = await Do([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\"\n    ])), n) {\n        te(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = ko(n);\n        if (te(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Qr(\"openssl version -v\");\n    if (i) {\n        te(`Found openssl binary with version: ${i}`);\n        let o = Nu(i);\n        if (te(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return te(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Do(e) {\n    for (let t of e){\n        let r = await qu(t);\n        if (r) return r;\n    }\n}\nasync function qu(e) {\n    try {\n        return (await zn.default.readdir(e)).find((r)=>r.startsWith(\"libssl.so.\") && !r.startsWith(\"libssl.so.0\"));\n    } catch (t) {\n        if (t.code === \"ENOENT\") return;\n        throw t;\n    }\n}\nasync function nt() {\n    let { binaryTarget: e } = await Mo();\n    return e;\n}\nfunction ju(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function Yn() {\n    let { memoized: e, ...t } = await Mo();\n    return t;\n}\nvar Ur = {};\nasync function Mo() {\n    if (ju(Ur)) return Promise.resolve({\n        ...Ur,\n        memoized: !0\n    });\n    let e = await Lo(), t = Vu(e);\n    return Ur = {\n        ...e,\n        binaryTarget: t\n    }, {\n        ...Ur,\n        memoized: !1\n    };\n}\nfunction Vu(e) {\n    let { platform: t, arch: r, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    t === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(r) && Br(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${r}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (t === \"linux\" && i === void 0) {\n        let c = mt({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Br(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (t === \"linux\" && o === void 0 && te(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), t === \"darwin\" && r === \"arm64\") return \"darwin-arm64\";\n    if (t === \"darwin\") return \"darwin\";\n    if (t === \"win32\") return \"windows\";\n    if (t === \"freebsd\") return o;\n    if (t === \"openbsd\") return \"openbsd\";\n    if (t === \"netbsd\") return \"netbsd\";\n    if (t === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (t === \"linux\" && r === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (t === \"linux\" && r === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (t === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || $o(i) ? c : `${c}-openssl-${i}`;\n    }\n    return t === \"linux\" && o && i ? `${o}-openssl-${i}` : (t !== \"linux\" && Br(`Prisma detected unknown OS \"${t}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function Bu(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Qr(e) {\n    return Bu(async ()=>{\n        let t = await Du(e);\n        return te(`Command \"${e}\" successfully returned \"${t.stdout}\"`), t.stdout;\n    });\n}\nasync function Uu() {\n    return typeof Gr.default.machine == \"function\" ? Gr.default.machine() : (await Qr(\"uname -m\"))?.trim();\n}\nfunction $o(e) {\n    return e.startsWith(\"1.\");\n}\nvar zo = k(Ko());\nfunction ii(e) {\n    return (0, zo.default)(e, e, {\n        fallback: X\n    });\n}\nvar Ku = k(si());\nvar $ = k(__webpack_require__(/*! path */ \"path\")), zu = k(si()), Lf = L(\"prisma:engines\");\nfunction Yo() {\n    return $.default.join(__dirname, \"../\");\n}\nvar Nf = \"libquery-engine\";\n$.default.join(__dirname, \"../query-engine-darwin\");\n$.default.join(__dirname, \"../query-engine-darwin-arm64\");\n$.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\n$.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\n$.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\n$.default.join(__dirname, \"../query-engine-linux-static-x64\");\n$.default.join(__dirname, \"../query-engine-linux-static-arm64\");\n$.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\n$.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\n$.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\n$.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\n$.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\n$.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar ai = k(__webpack_require__(/*! fs */ \"fs\")), Zo = L(\"chmodPlusX\");\nfunction li(e) {\n    if (process.platform === \"win32\") return;\n    let t = ai.default.statSync(e), r = t.mode | 64 | 8 | 1;\n    if (t.mode === r) {\n        Zo(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = r.toString(8).slice(-3);\n    Zo(`Have to call chmodPlusX on ${e}`), ai.default.chmodSync(e, n);\n}\nfunction ui(e) {\n    let t = e.e, r = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = t.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${ii(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Oe(e.id)}\\`).`, s = mt({\n        message: t.message,\n        code: t.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${r(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${r(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${r(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${t.message}`;\n}\nvar di = k(ts()), zr = k(__webpack_require__(/*! fs */ \"fs\"));\nvar ht = k(__webpack_require__(/*! path */ \"path\"));\nfunction rs(e) {\n    let t = e.ignoreProcessEnv ? {} : process.env, r = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(t, p) ? t[p] : e.parsed[p] || \"\", u = r(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(t, n) ? t[n] : e.parsed[n];\n        e.parsed[n] = r(i);\n    }\n    for(let n in e.parsed)t[n] = e.parsed[n];\n    return e;\n}\nvar pi = L(\"prisma:tryLoadEnv\");\nfunction zt({ rootEnvPath: e, schemaEnvPath: t }, r = {\n    conflictCheck: \"none\"\n}) {\n    let n = ns(e);\n    r.conflictCheck !== \"none\" && sc(n, t, r.conflictCheck);\n    let i = null;\n    return is(n?.path, t) || (i = ns(t)), !n && !i && pi(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(ce(H(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction sc(e, t, r) {\n    let n = e?.dotenvResult.parsed, i = !is(e?.path, t);\n    if (n && t && i && zr.default.existsSync(t)) {\n        let o = di.default.parse(zr.default.readFileSync(t)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = ht.default.relative(process.cwd(), e.path), l = ht.default.relative(process.cwd(), t);\n            if (r === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${X(a)} and ${X(l)}\nConflicting env vars:\n${s.map((c)=>`  ${H(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${X(l)} to ${X(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (r === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>H(c)).join(\", \")} in ${X(a)} and ${X(l)}\nEnv vars from ${X(l)} overwrite the ones from ${X(a)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction ns(e) {\n    if (ac(e)) {\n        pi(`Environment variables loaded from ${e}`);\n        let t = di.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: rs(t),\n            message: Oe(`Environment variables loaded from ${ht.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else pi(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction is(e, t) {\n    return e && t && ht.default.resolve(e) === ht.default.resolve(t);\n}\nfunction ac(e) {\n    return !!(e && zr.default.existsSync(e));\n}\nvar os = \"library\";\nfunction Yt(e) {\n    let t = lc();\n    return t || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : os);\n}\nfunction lc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : void 0;\n}\nvar Je;\n((t)=>{\n    let e;\n    ((E)=>(E.findUnique = \"findUnique\", E.findUniqueOrThrow = \"findUniqueOrThrow\", E.findFirst = \"findFirst\", E.findFirstOrThrow = \"findFirstOrThrow\", E.findMany = \"findMany\", E.create = \"create\", E.createMany = \"createMany\", E.createManyAndReturn = \"createManyAndReturn\", E.update = \"update\", E.updateMany = \"updateMany\", E.upsert = \"upsert\", E.delete = \"delete\", E.deleteMany = \"deleteMany\", E.groupBy = \"groupBy\", E.count = \"count\", E.aggregate = \"aggregate\", E.findRaw = \"findRaw\", E.aggregateRaw = \"aggregateRaw\"))(e = t.ModelAction ||= {});\n})(Je ||= {});\nvar Zt = k(__webpack_require__(/*! path */ \"path\"));\nfunction mi(e) {\n    return Zt.default.sep === Zt.default.posix.sep ? e : e.split(Zt.default.sep).join(Zt.default.posix.sep);\n}\nvar ps = k(fi());\nfunction hi(e) {\n    return String(new gi(e));\n}\nvar gi = class {\n    constructor(t){\n        this.config = t;\n    }\n    toString() {\n        let { config: t } = this, r = t.provider.fromEnvVar ? `env(\"${t.provider.fromEnvVar}\")` : t.provider.value, n = JSON.parse(JSON.stringify({\n            provider: r,\n            binaryTargets: cc(t.binaryTargets)\n        }));\n        return `generator ${t.name} {\n${(0, ps.default)(pc(n), 2)}\n}`;\n    }\n};\nfunction cc(e) {\n    let t;\n    if (e.length > 0) {\n        let r = e.find((n)=>n.fromEnvVar !== null);\n        r ? t = `env(\"${r.fromEnvVar}\")` : t = e.map((n)=>n.native ? \"native\" : n.value);\n    } else t = void 0;\n    return t;\n}\nfunction pc(e) {\n    let t = Object.keys(e).reduce((r, n)=>Math.max(r, n.length), 0);\n    return Object.entries(e).map(([r, n])=>`${r.padEnd(t)} = ${dc(n)}`).join(`\n`);\n}\nfunction dc(e) {\n    return JSON.parse(JSON.stringify(e, (t, r)=>Array.isArray(r) ? `[${r.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(r)));\n}\nvar er = {};\nUt(er, {\n    error: ()=>gc,\n    info: ()=>fc,\n    log: ()=>mc,\n    query: ()=>hc,\n    should: ()=>ds,\n    tags: ()=>Xt,\n    warn: ()=>yi\n});\nvar Xt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: De(\"prisma:info\"),\n    query: rt(\"prisma:query\")\n}, ds = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction mc(...e) {\n    console.log(...e);\n}\nfunction yi(e, ...t) {\n    ds.warn() && console.warn(`${Xt.warn} ${e}`, ...t);\n}\nfunction fc(e, ...t) {\n    console.info(`${Xt.info} ${e}`, ...t);\n}\nfunction gc(e, ...t) {\n    console.error(`${Xt.error} ${e}`, ...t);\n}\nfunction hc(e, ...t) {\n    console.log(`${Xt.query} ${e}`, ...t);\n}\nfunction Yr(e, t) {\n    if (!e) throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction Fe(e, t) {\n    throw new Error(t);\n}\nfunction Ei(e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n}\nvar wi = (e, t)=>e.reduce((r, n)=>(r[t(n)] = n, r), {});\nfunction yt(e, t) {\n    let r = {};\n    for (let n of Object.keys(e))r[n] = t(e[n], n);\n    return r;\n}\nfunction xi(e, t) {\n    if (e.length === 0) return;\n    let r = e[0];\n    for(let n = 1; n < e.length; n++)t(r, e[n]) < 0 && (r = e[n]);\n    return r;\n}\nfunction w(e, t) {\n    Object.defineProperty(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n}\nvar ys = new Set, tr = (e, t, ...r)=>{\n    ys.has(e) || (ys.add(e), yi(t, ...r));\n};\nvar V = class extends Error {\n    constructor(t, { code: r, clientVersion: n, meta: i, batchRequestIdx: o }){\n        super(t), this.name = \"PrismaClientKnownRequestError\", this.code = r, this.clientVersion = n, this.meta = i, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nw(V, \"PrismaClientKnownRequestError\");\nvar Le = class extends V {\n    constructor(t, r){\n        super(t, {\n            code: \"P2025\",\n            clientVersion: r\n        }), this.name = \"NotFoundError\";\n    }\n};\nw(Le, \"NotFoundError\");\nvar R = class e extends Error {\n    constructor(t, r, n){\n        super(t), this.name = \"PrismaClientInitializationError\", this.clientVersion = r, this.errorCode = n, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nw(R, \"PrismaClientInitializationError\");\nvar le = class extends Error {\n    constructor(t, r){\n        super(t), this.name = \"PrismaClientRustPanicError\", this.clientVersion = r;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nw(le, \"PrismaClientRustPanicError\");\nvar B = class extends Error {\n    constructor(t, { clientVersion: r, batchRequestIdx: n }){\n        super(t), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = r, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nw(B, \"PrismaClientUnknownRequestError\");\nvar J = class extends Error {\n    constructor(r, { clientVersion: n }){\n        super(r);\n        this.name = \"PrismaClientValidationError\";\n        this.clientVersion = n;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nw(J, \"PrismaClientValidationError\");\nvar bt = 9e15, ze = 1e9, Pi = \"0123456789abcdef\", tn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", rn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", vi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -bt,\n    maxE: bt,\n    crypto: !1\n}, xs, Ne, x = !0, on = \"[DecimalError] \", Ke = on + \"Invalid argument: \", Ps = on + \"Precision limit exceeded\", vs = on + \"crypto unavailable\", Ts = \"[object Decimal]\", ee = Math.floor, G = Math.pow, bc = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Ec = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, wc = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Rs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, ge = 1e7, b = 7, xc = 9007199254740991, Pc = tn.length - 1, Ti = rn.length - 1, m = {\n    toStringTag: Ts\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), y(e);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, t) {\n    var r, n = this, i = n.constructor;\n    if (e = new i(e), t = new i(t), !e.s || !t.s) return new i(NaN);\n    if (e.gt(t)) throw Error(Ke + t);\n    return r = n.cmp(e), r < 0 ? e : n.cmp(t) > 0 ? t : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var t, r, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, t = 0, r = n < i ? n : i; t < r; ++t)if (s[t] !== a[t]) return s[t] > a[t] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.d ? r.d[0] ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = vc(n, Os(n, r)), n.precision = e, n.rounding = t, y(Ne == 2 || Ne == 3 ? r.neg() : r, e, t, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, t, r, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(x = !1, o = c.s * G(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (r = K(c.d), e = c.e, (o = (e - r.length + 1) % 3) && (r += o == 1 || o == -2 ? \"0\" : \"00\"), o = G(r, 1 / 3), e = ee((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? r = \"5e\" + e : (r = o.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + e), n = new p(r), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = N(u.plus(c).times(a), u.plus(l), s + 2, 1), K(a.d).slice(0, s) === (r = K(n.d)).slice(0, s)) if (r = r.slice(s - 3, s + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (y(n, e + 1, 1), t = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return x = !0, y(n, e, p.rounding, t);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, t = this.d, r = NaN;\n    if (t) {\n        if (e = t.length - 1, r = (e - ee(this.e / b)) * b, e = t[e], e) for(; e % 10 == 0; e /= 10)r--;\n        r < 0 && (r = 0);\n    }\n    return r;\n};\nm.dividedBy = m.div = function(e) {\n    return N(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var t = this, r = t.constructor;\n    return y(N(t, new r(e), 0, 1, 1), r.precision, r.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var t = this.cmp(e);\n    return t == 1 || t === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, t, r, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    r = s.precision, n = s.rounding, s.precision = r + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), t = (1 / an(4, e)).toString()) : (e = 16, t = \"2.3283064365386962890625e-10\"), o = Et(s, 1, o.times(t), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return y(o, s.precision = r, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (t = o.precision, r = o.rounding, o.precision = t + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = Et(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / an(5, e)), i = Et(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = t, o.rounding = r, y(i, t, r, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 7, n.rounding = 1, N(r.sinh(), r.cosh(), n.precision = e, n.rounding = t)) : new n(r.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e, t = this, r = t.constructor, n = t.abs().cmp(1), i = r.precision, o = r.rounding;\n    return n !== -1 ? n === 0 ? t.isNeg() ? fe(r, i, o) : new r(0) : new r(NaN) : t.isZero() ? fe(r, i + 4, o).times(.5) : (r.precision = i + 6, r.rounding = 1, t = t.asin(), e = fe(r, i + 4, o).times(.5), r.precision = i, r.rounding = o, e.minus(t));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.lte(1) ? new n(r.eq(1) ? 0 : NaN) : r.isFinite() ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, x = !1, r = r.times(r).minus(1).sqrt().plus(r), x = !0, n.precision = e, n.rounding = t, r.ln()) : new n(r);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, t, r = this, n = r.constructor;\n    return !r.isFinite() || r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, x = !1, r = r.times(r).plus(1).sqrt().plus(r), x = !0, n.precision = e, n.rounding = t, r.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, t = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, t, !0) : (o.precision = r = n - i.e, i = N(i.plus(1), new o(1).minus(i), r + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = t, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (t = i.abs().cmp(1), r = o.precision, n = o.rounding, t !== -1 ? t === 0 ? (e = fe(o, r + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = r + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = r, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Ti) return s = fe(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Ti) return s = fe(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, r = Math.min(28, a / b + 2 | 0), e = r; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(x = !1, t = Math.ceil(a / b), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[t] !== void 0) for(e = t; s.d[e] === o.d[e] && e--;);\n    return r && (s = s.times(2 << r - 1)), x = !0, y(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && ee(this.e / b) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), t = !0;\n    else {\n        if (e = new c(e), r = e.d, e.s < 0 || !r || !r[0] || e.eq(1)) return new c(NaN);\n        t = e.eq(10);\n    }\n    if (r = u.d, u.s < 0 || !r || !r[0] || u.eq(1)) return new c(r && !r[0] ? -1 / 0 : u.s != 1 ? NaN : r ? 0 : 1 / 0);\n    if (t) if (r.length > 1) o = !0;\n    else {\n        for(i = r[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (x = !1, a = p + f, s = He(u, a), n = t ? nn(c, a + 10) : He(e, a), l = N(s, n, a, 1), rr(l.d, i = p, d)) do if (a += 10, s = He(u, a), n = t ? nn(c, a + 10) : He(e, a), l = N(s, n, a, 1), !o) {\n        +K(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));\n        break;\n    }\n    while (rr(l.d, i += 10, d));\n    return x = !0, y(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p, d, f = this, g = f.constructor;\n    if (e = new g(e), !f.d || !e.d) return !f.s || !e.s ? e = new g(NaN) : f.d ? e.s = -e.s : e = new g(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = g.precision, l = g.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new g(f);\n        else return new g(l === 3 ? -0 : 0);\n        return x ? y(e, a, l) : e;\n    }\n    if (r = ee(e.e / b), c = ee(f.e / b), u = u.slice(), o = c - r, o) {\n        for(p = o < 0, p ? (t = u, o = -o, s = d.length) : (t = d, r = c, s = u.length), n = Math.max(Math.ceil(a / b), s) + 2, o > n && (o = n, t.length = 1), t.reverse(), n = o; n--;)t.push(0);\n        t.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (t = u, u = d, d = t, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = ge - 1;\n            --u[i], u[n] += ge;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--r;\n    return u[0] ? (e.d = u, e.e = sn(u, r), x ? y(e, a, l) : e) : new g(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var t, r = this, n = r.constructor;\n    return e = new n(e), !r.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || r.d && !r.d[0] ? y(new n(r), n.precision, n.rounding) : (x = !1, n.modulo == 9 ? (t = N(r, e.abs(), 0, 3, 1), t.s *= e.s) : t = N(r, e, 0, n.modulo, 1), t = t.times(e), x = !0, r.minus(t));\n};\nm.naturalExponential = m.exp = function() {\n    return Ri(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return He(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, y(e);\n};\nm.plus = m.add = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), x ? y(e, a, l) : e;\n    if (o = ee(p.e / b), n = ee(e.e / b), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (r = u, i = -i, s = c.length) : (r = c, n = o, s = u.length), o = Math.ceil(a / b), s = o > s ? o + 1 : s + 1, i > s && (i = s, r.length = 1), r.reverse(); i--;)r.push(0);\n        r.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, r = c, c = u, u = r), t = 0; i;)t = (u[--i] = u[i] + c[i] + t) / ge | 0, u[i] %= ge;\n    for(t && (u.unshift(t), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = sn(u, n), x ? y(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var t, r = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(Ke + e);\n    return r.d ? (t = Cs(r.d), e && r.e + 1 > t && (t = r.e + 1)) : t = NaN, t;\n};\nm.round = function() {\n    var e = this, t = e.constructor;\n    return y(new t(e), e.e + 1, t.rounding);\n};\nm.sine = m.sin = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = Rc(n, Os(n, r)), n.precision = e, n.rounding = t, y(Ne > 2 ? r.neg() : r, e, t, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, t, r, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(x = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (t = K(a), (t.length + l) % 2 == 0 && (t += \"0\"), u = Math.sqrt(t), l = ee((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? t = \"5e\" + l : (t = u.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + l), n = new c(t)) : n = new c(u.toString()), r = (l = c.precision) + 3;;)if (o = n, n = o.plus(N(s, o, r + 2, 1)).times(.5), K(o.d).slice(0, r) === (t = K(n.d)).slice(0, r)) if (t = t.slice(r - 3, r + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        r += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (y(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return x = !0, y(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = N(r, new n(1).minus(r.times(r)).sqrt(), e + 10, 0), n.precision = e, n.rounding = t, y(Ne == 2 || Ne == 4 ? r.neg() : r, e, t, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var t, r, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(r = ee(c.e / b) + ee(e.e / b), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(t = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + t, o[i--] = a % ge | 0, t = a / ge | 0;\n        o[i] = (o[i] + t) % ge | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return t ? ++r : o.shift(), e.d = o, e.e = sn(o, r), x ? y(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, t) {\n    return Si(this, 2, e, t);\n};\nm.toDecimalPlaces = m.toDP = function(e, t) {\n    var r = this, n = r.constructor;\n    return r = new n(r), e === void 0 ? r : (ie(e, 0, ze), t === void 0 ? t = n.rounding : ie(t, 0, 8), y(r, e + r.e + 1, t));\n};\nm.toExponential = function(e, t) {\n    var r, n = this, i = n.constructor;\n    return e === void 0 ? r = we(n, !0) : (ie(e, 0, ze), t === void 0 ? t = i.rounding : ie(t, 0, 8), n = y(new i(n), e + 1, t), r = we(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + r : r;\n};\nm.toFixed = function(e, t) {\n    var r, n, i = this, o = i.constructor;\n    return e === void 0 ? r = we(i) : (ie(e, 0, ze), t === void 0 ? t = o.rounding : ie(t, 0, 8), n = y(new o(i), e + i.e + 1, t), r = we(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + r : r;\n};\nm.toFraction = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p, d, f = this, g = f.d, h = f.constructor;\n    if (!g) return new h(f);\n    if (u = r = new h(1), n = l = new h(0), t = new h(n), o = t.e = Cs(g) - f.e - 1, s = o % b, t.d[0] = G(10, s < 0 ? b + s : s), e == null) e = o > 0 ? t : u;\n    else {\n        if (a = new h(e), !a.isInt() || a.lt(u)) throw Error(Ke + a);\n        e = a.gt(t) ? o > 0 ? t : u : a;\n    }\n    for(x = !1, a = new h(K(g)), c = h.precision, h.precision = o = g.length * b * 2; p = N(a, t, 0, 1, 1), i = r.plus(p.times(n)), i.cmp(e) != 1;)r = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = t, t = a.minus(p.times(i)), a = i;\n    return i = N(e.minus(r), n, 0, 1, 1), l = l.plus(i.times(u)), r = r.plus(i.times(n)), l.s = u.s = f.s, d = N(u, n, o, 1).minus(f).abs().cmp(N(l, r, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        r\n    ], h.precision = c, x = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, t) {\n    return Si(this, 16, e, t);\n};\nm.toNearest = function(e, t) {\n    var r = this, n = r.constructor;\n    if (r = new n(r), e == null) {\n        if (!r.d) return r;\n        e = new n(1), t = n.rounding;\n    } else {\n        if (e = new n(e), t === void 0 ? t = n.rounding : ie(t, 0, 8), !r.d) return e.s ? r : e;\n        if (!e.d) return e.s && (e.s = r.s), e;\n    }\n    return e.d[0] ? (x = !1, r = N(r, e, 0, t, 1).times(e), x = !0, y(r)) : (e.s = r.s, r = e), r;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, t) {\n    return Si(this, 8, e, t);\n};\nm.toPower = m.pow = function(e) {\n    var t, r, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(G(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);\n    if (t = ee(e.e / b), t >= e.d.length - 1 && (r = u < 0 ? -u : u) <= xc) return i = Ss(l, a, r, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);\n    if (s = a.s, s < 0) {\n        if (t < e.d.length - 1) return new l(NaN);\n        if (e.d[t] & 1 || (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return r = G(+a, u), t = r == 0 || !isFinite(r) ? ee(u * (Math.log(\"0.\" + K(a.d)) / Math.LN10 + a.e + 1)) : new l(r + \"\").e, t > l.maxE + 1 || t < l.minE - 1 ? new l(t > 0 ? s / 0 : 0) : (x = !1, l.rounding = a.s = 1, r = Math.min(12, (t + \"\").length), i = Ri(e.times(He(a, n + r)), n), i.d && (i = y(i, n + 5, 1), rr(i.d, n, o) && (t = n + 10, i = y(Ri(e.times(He(a, t + r)), t), t + 5, 1), +K(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, x = !0, l.rounding = o, y(i, n, o));\n};\nm.toPrecision = function(e, t) {\n    var r, n = this, i = n.constructor;\n    return e === void 0 ? r = we(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ie(e, 1, ze), t === void 0 ? t = i.rounding : ie(t, 0, 8), n = y(new i(n), e, t), r = we(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + r : r;\n};\nm.toSignificantDigits = m.toSD = function(e, t) {\n    var r = this, n = r.constructor;\n    return e === void 0 ? (e = n.precision, t = n.rounding) : (ie(e, 1, ze), t === void 0 ? t = n.rounding : ie(t, 0, 8)), y(new n(r), e, t);\n};\nm.toString = function() {\n    var e = this, t = e.constructor, r = we(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + r : r;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, t = e.constructor, r = we(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);\n    return e.isNeg() ? \"-\" + r : r;\n};\nfunction K(e) {\n    var t, r, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, t = 1; t < i; t++)n = e[t] + \"\", r = b - n.length, r && (o += We(r)), o += n;\n        s = e[t], n = s + \"\", r = b - n.length, r && (o += We(r));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ie(e, t, r) {\n    if (e !== ~~e || e < t || e > r) throw Error(Ke + e);\n}\nfunction rr(e, t, r, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--t;\n    return --t < 0 ? (t += b, i = 0) : (i = Math.ceil((t + 1) / b), t %= b), o = G(10, b - t), a = e[i] % o | 0, n == null ? t < 3 ? (t == 0 ? a = a / 100 | 0 : t == 1 && (a = a / 10 | 0), s = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 5e4 || a == 0) : s = (r < 4 && a + 1 == o || r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == G(10, t - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : t < 4 ? (t == 0 ? a = a / 1e3 | 0 : t == 1 ? a = a / 100 | 0 : t == 2 && (a = a / 10 | 0), s = (n || r < 4) && a == 9999 || !n && r > 3 && a == 4999) : s = ((n || r < 4) && a + 1 == o || !n && r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == G(10, t - 3) - 1, s;\n}\nfunction en(e, t, r) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= t;\n        for(i[0] += Pi.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > r - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / r | 0, i[n] %= r);\n    }\n    return i.reverse();\n}\nfunction vc(e, t) {\n    var r, n, i;\n    if (t.isZero()) return t;\n    n = t.d.length, n < 32 ? (r = Math.ceil(n / 3), i = (1 / an(4, r)).toString()) : (r = 16, i = \"2.3283064365386962890625e-10\"), e.precision += r, t = Et(e, 1, t.times(i), new e(1));\n    for(var o = r; o--;){\n        var s = t.times(t);\n        t = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= r, t;\n}\nvar N = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function t(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function r(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, g, h, O, T, S, C, E, me, ae, Bt, U, ne, Ie, z, dt, Lr = n.constructor, qn = n.s == i.s ? 1 : -1, Y = n.d, _ = i.d;\n        if (!Y || !Y[0] || !_ || !_[0]) return new Lr(!n.s || !i.s || (Y ? _ && Y[0] == _[0] : !_) ? NaN : Y && Y[0] == 0 || !_ ? qn * 0 : qn / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = ge, f = b, c = ee(n.e / f) - ee(i.e / f)), z = _.length, ne = Y.length, T = new Lr(qn), S = T.d = [], p = 0; _[p] == (Y[p] || 0); p++);\n        if (_[p] > (Y[p] || 0) && c--, o == null ? (ae = o = Lr.precision, s = Lr.rounding) : a ? ae = o + (n.e - i.e) + 1 : ae = o, ae < 0) S.push(1), g = !0;\n        else {\n            if (ae = ae / f + 2 | 0, p = 0, z == 1) {\n                for(d = 0, _ = _[0], ae++; (p < ne || d) && ae--; p++)Bt = d * l + (Y[p] || 0), S[p] = Bt / _ | 0, d = Bt % _ | 0;\n                g = d || p < ne;\n            } else {\n                for(d = l / (_[0] + 1) | 0, d > 1 && (_ = e(_, d, l), Y = e(Y, d, l), z = _.length, ne = Y.length), U = z, C = Y.slice(0, z), E = C.length; E < z;)C[E++] = 0;\n                dt = _.slice(), dt.unshift(0), Ie = _[0], _[1] >= l / 2 && ++Ie;\n                do d = 0, u = t(_, C, z, E), u < 0 ? (me = C[0], z != E && (me = me * l + (C[1] || 0)), d = me / Ie | 0, d > 1 ? (d >= l && (d = l - 1), h = e(_, d, l), O = h.length, E = C.length, u = t(h, C, O, E), u == 1 && (d--, r(h, z < O ? dt : _, O, l))) : (d == 0 && (u = d = 1), h = _.slice()), O = h.length, O < E && h.unshift(0), r(C, h, E, l), u == -1 && (E = C.length, u = t(_, C, z, E), u < 1 && (d++, r(C, z < E ? dt : _, E, l))), E = C.length) : u === 0 && (d++, C = [\n                    0\n                ]), S[p++] = d, u && C[0] ? C[E++] = Y[U] || 0 : (C = [\n                    Y[U]\n                ], E = 1);\n                while ((U++ < ne || C[0] !== void 0) && ae--);\n                g = C[0] !== void 0;\n            }\n            S[0] || S.shift();\n        }\n        if (f == 1) T.e = c, xs = g;\n        else {\n            for(p = 1, d = S[0]; d >= 10; d /= 10)p++;\n            T.e = p + c * f - 1, y(T, a ? o + T.e + 1 : o, s, g);\n        }\n        return T;\n    };\n}();\nfunction y(e, t, r, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (t != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = t - i, o < 0) o += b, s = t, c = p[d = 0], l = c / G(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / b), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= b, s = o - b + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= b, s = o - b + i, l = s < 0 ? 0 : c / G(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || t < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % G(10, i - s - 1)), u = r < 4 ? (l || n) && (r == 0 || r == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (r == 4 || n || r == 6 && (o > 0 ? s > 0 ? c / G(10, i - s) : 0 : p[d - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !p[0]) return p.length = 0, u ? (t -= e.e + 1, p[0] = G(10, (b - t % b) % b), e.e = -t || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = G(10, b - o), p[d] = s > 0 ? (c / G(10, i - s) % G(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == ge && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != ge) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return x && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction we(e, t, r) {\n    if (!e.isFinite()) return Is(e);\n    var n, i = e.e, o = K(e.d), s = o.length;\n    return t ? (r && (n = r - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + We(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + We(-i - 1) + o, r && (n = r - s) > 0 && (o += We(n))) : i >= s ? (o += We(i + 1 - s), r && (n = r - i - 1) > 0 && (o = o + \".\" + We(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), r && (n = r - s) > 0 && (i + 1 === s && (o += \".\"), o += We(n))), o;\n}\nfunction sn(e, t) {\n    var r = e[0];\n    for(t *= b; r >= 10; r /= 10)t++;\n    return t;\n}\nfunction nn(e, t, r) {\n    if (t > Pc) throw x = !0, r && (e.precision = r), Error(Ps);\n    return y(new e(tn), t, 1, !0);\n}\nfunction fe(e, t, r) {\n    if (t > Ti) throw Error(Ps);\n    return y(new e(rn), t, r, !0);\n}\nfunction Cs(e) {\n    var t = e.length - 1, r = t * b + 1;\n    if (t = e[t], t) {\n        for(; t % 10 == 0; t /= 10)r--;\n        for(t = e[0]; t >= 10; t /= 10)r++;\n    }\n    return r;\n}\nfunction We(e) {\n    for(var t = \"\"; e--;)t += \"0\";\n    return t;\n}\nfunction Ss(e, t, r, n) {\n    var i, o = new e(1), s = Math.ceil(n / b + 4);\n    for(x = !1;;){\n        if (r % 2 && (o = o.times(t), Es(o.d, s) && (i = !0)), r = ee(r / 2), r === 0) {\n            r = o.d.length - 1, i && o.d[r] === 0 && ++o.d[r];\n            break;\n        }\n        t = t.times(t), Es(t.d, s);\n    }\n    return x = !0, o;\n}\nfunction bs(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction As(e, t, r) {\n    for(var n, i = new e(t[0]), o = 0; ++o < t.length;)if (n = new e(t[o]), n.s) i[r](n) && (i = n);\n    else {\n        i = n;\n        break;\n    }\n    return i;\n}\nfunction Ri(e, t) {\n    var r, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, g = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(t == null ? (x = !1, l = g) : l = t, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(G(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, r = o = s = new d(1), d.precision = l;;){\n        if (o = y(o.times(e), l, 1), r = r.times(++c), a = s.plus(N(o, r, l, 1)), K(a.d).slice(0, l) === K(s.d).slice(0, l)) {\n            for(i = p; i--;)s = y(s.times(s), l, 1);\n            if (t == null) if (u < 3 && rr(s.d, l - n, f, u)) d.precision = l += 10, r = o = a = new d(1), c = 0, u++;\n            else return y(s, d.precision = g, f, x = !0);\n            else return d.precision = g, s;\n        }\n        s = a;\n    }\n}\nfunction He(e, t) {\n    var r, n, i, o, s, a, l, u, c, p, d, f = 1, g = 10, h = e, O = h.d, T = h.constructor, S = T.rounding, C = T.precision;\n    if (h.s < 0 || !O || !O[0] || !h.e && O[0] == 1 && O.length == 1) return new T(O && !O[0] ? -1 / 0 : h.s != 1 ? NaN : O ? 0 : h);\n    if (t == null ? (x = !1, c = C) : c = t, T.precision = c += g, r = K(O), n = r.charAt(0), Math.abs(o = h.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && r.charAt(1) > 3;)h = h.times(e), r = K(h.d), n = r.charAt(0), f++;\n        o = h.e, n > 1 ? (h = new T(\"0.\" + r), o++) : h = new T(n + \".\" + r.slice(1));\n    } else return u = nn(T, c + 2, C).times(o + \"\"), h = He(new T(n + \".\" + r.slice(1)), c - g).plus(u), T.precision = C, t == null ? y(h, C, S, x = !0) : h;\n    for(p = h, l = s = h = N(h.minus(1), h.plus(1), c, 1), d = y(h.times(h), c, 1), i = 3;;){\n        if (s = y(s.times(d), c, 1), u = l.plus(N(s, new T(i), c, 1)), K(u.d).slice(0, c) === K(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(nn(T, c + 2, C).times(o + \"\"))), l = N(l, new T(f), c, 1), t == null) if (rr(l.d, c - g, S, a)) T.precision = c += g, u = s = h = N(p.minus(1), p.plus(1), c, 1), d = y(h.times(h), c, 1), i = a = 1;\n        else return y(l, T.precision = C, S, x = !0);\n        else return T.precision = C, l;\n        l = u, i += 2;\n    }\n}\nfunction Is(e) {\n    return String(e.s * e.s / 0);\n}\nfunction Ci(e, t) {\n    var r, n, i;\n    for((r = t.indexOf(\".\")) > -1 && (t = t.replace(\".\", \"\")), (n = t.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +t.slice(n + 1), t = t.substring(0, n)) : r < 0 && (r = t.length), n = 0; t.charCodeAt(n) === 48; n++);\n    for(i = t.length; t.charCodeAt(i - 1) === 48; --i);\n    if (t = t.slice(n, i), t) {\n        if (i -= n, e.e = r = r - n - 1, e.d = [], n = (r + 1) % b, r < 0 && (n += b), n < i) {\n            for(n && e.d.push(+t.slice(0, n)), i -= b; n < i;)e.d.push(+t.slice(n, n += b));\n            t = t.slice(n), n = b - t.length;\n        } else n -= i;\n        for(; n--;)t += \"0\";\n        e.d.push(+t), x && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Tc(e, t) {\n    var r, n, i, o, s, a, l, u, c;\n    if (t.indexOf(\"_\") > -1) {\n        if (t = t.replace(/(\\d)_(?=\\d)/g, \"$1\"), Rs.test(t)) return Ci(e, t);\n    } else if (t === \"Infinity\" || t === \"NaN\") return +t || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (Ec.test(t)) r = 16, t = t.toLowerCase();\n    else if (bc.test(t)) r = 2;\n    else if (wc.test(t)) r = 8;\n    else throw Error(Ke + t);\n    for(o = t.search(/p/i), o > 0 ? (l = +t.slice(o + 1), t = t.substring(2, o)) : t = t.slice(2), o = t.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (t = t.replace(\".\", \"\"), a = t.length, o = a - o, i = Ss(n, new n(r), o, o * 2)), u = en(t, r, ge), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = sn(u, c), e.d = u, x = !1, s && (e = N(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? G(2, l) : it.pow(2, l))), x = !0, e);\n}\nfunction Rc(e, t) {\n    var r, n = t.d.length;\n    if (n < 3) return t.isZero() ? t : Et(e, 2, t, t);\n    r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, t = t.times(1 / an(5, r)), t = Et(e, 2, t, t);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); r--;)i = t.times(t), t = t.times(o.plus(i.times(s.times(i).minus(a))));\n    return t;\n}\nfunction Et(e, t, r, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / b);\n    for(x = !1, l = r.times(r), a = new e(n);;){\n        if (s = N(a.times(l), new e(t++ * t++), c, 1), a = i ? n.plus(s) : n.minus(s), n = N(s.times(l), new e(t++ * t++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return x = !0, s.d.length = p + 1, s;\n}\nfunction an(e, t) {\n    for(var r = e; --t;)r *= e;\n    return r;\n}\nfunction Os(e, t) {\n    var r, n = t.s < 0, i = fe(e, e.precision, 1), o = i.times(.5);\n    if (t = t.abs(), t.lte(o)) return Ne = n ? 4 : 1, t;\n    if (r = t.divToInt(i), r.isZero()) Ne = n ? 3 : 2;\n    else {\n        if (t = t.minus(r.times(i)), t.lte(o)) return Ne = bs(r) ? n ? 2 : 3 : n ? 4 : 1, t;\n        Ne = bs(r) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return t.minus(i).abs();\n}\nfunction Si(e, t, r, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, g = r !== void 0;\n    if (g ? (ie(r, 1, ze), n === void 0 ? n = f.rounding : ie(n, 0, 8)) : (r = f.precision, n = f.rounding), !e.isFinite()) c = Is(e);\n    else {\n        for(c = we(e), s = c.indexOf(\".\"), g ? (i = 2, t == 16 ? r = r * 4 - 3 : t == 8 && (r = r * 3 - 2)) : i = t, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = en(we(d), 10, i), d.e = d.d.length), p = en(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = g ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = N(e, d, r, n, 0, i), p = e.d, o = e.e, u = xs), s = p[r], a = i / 2, u = u || p[r + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[r - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = r, u) for(; ++p[--r] > i - 1;)p[r] = 0, r || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += Pi.charAt(p[s]);\n            if (g) {\n                if (l > 1) if (t == 16 || t == 8) {\n                    for(s = t == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = en(c, i, t), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += Pi.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (t == 16 ? \"0x\" : t == 2 ? \"0b\" : t == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction Es(e, t) {\n    if (e.length > t) return e.length = t, !0;\n}\nfunction Cc(e) {\n    return new this(e).abs();\n}\nfunction Sc(e) {\n    return new this(e).acos();\n}\nfunction Ac(e) {\n    return new this(e).acosh();\n}\nfunction Ic(e, t) {\n    return new this(e).plus(t);\n}\nfunction Oc(e) {\n    return new this(e).asin();\n}\nfunction kc(e) {\n    return new this(e).asinh();\n}\nfunction Dc(e) {\n    return new this(e).atan();\n}\nfunction _c(e) {\n    return new this(e).atanh();\n}\nfunction Fc(e, t) {\n    e = new this(e), t = new this(t);\n    var r, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !t.s ? r = new this(NaN) : !e.d && !t.d ? (r = fe(this, o, 1).times(t.s > 0 ? .25 : .75), r.s = e.s) : !t.d || e.isZero() ? (r = t.s < 0 ? fe(this, n, i) : new this(0), r.s = e.s) : !e.d || t.isZero() ? (r = fe(this, o, 1).times(.5), r.s = e.s) : t.s < 0 ? (this.precision = o, this.rounding = 1, r = this.atan(N(e, t, o, 1)), t = fe(this, o, 1), this.precision = n, this.rounding = i, r = e.s < 0 ? r.minus(t) : r.plus(t)) : r = this.atan(N(e, t, o, 1)), r;\n}\nfunction Lc(e) {\n    return new this(e).cbrt();\n}\nfunction Nc(e) {\n    return y(e = new this(e), e.e + 1, 2);\n}\nfunction Mc(e, t, r) {\n    return new this(e).clamp(t, r);\n}\nfunction $c(e) {\n    if (!e || typeof e != \"object\") throw Error(on + \"Object expected\");\n    var t, r, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        ze,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -bt,\n        0,\n        \"toExpPos\",\n        0,\n        bt,\n        \"maxE\",\n        0,\n        bt,\n        \"minE\",\n        -bt,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(t = 0; t < o.length; t += 3)if (r = o[t], i && (this[r] = vi[r]), (n = e[r]) !== void 0) if (ee(n) === n && n >= o[t + 1] && n <= o[t + 2]) this[r] = n;\n    else throw Error(Ke + r + \": \" + n);\n    if (r = \"crypto\", i && (this[r] = vi[r]), (n = e[r]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r] = !0;\n    else throw Error(vs);\n    else this[r] = !1;\n    else throw Error(Ke + r + \": \" + n);\n    return this;\n}\nfunction qc(e) {\n    return new this(e).cos();\n}\nfunction jc(e) {\n    return new this(e).cosh();\n}\nfunction ks(e) {\n    var t, r, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, ws(o)) {\n            u.s = o.s, x ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                x ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            } else if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return Ci(u, o.toString());\n        } else if (l !== \"string\") throw Error(Ke + o);\n        return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Rs.test(o) ? Ci(u, o) : Tc(u, o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = $c, i.clone = ks, i.isDecimal = ws, i.abs = Cc, i.acos = Sc, i.acosh = Ac, i.add = Ic, i.asin = Oc, i.asinh = kc, i.atan = Dc, i.atanh = _c, i.atan2 = Fc, i.cbrt = Lc, i.ceil = Nc, i.clamp = Mc, i.cos = qc, i.cosh = jc, i.div = Vc, i.exp = Bc, i.floor = Uc, i.hypot = Gc, i.ln = Qc, i.log = Jc, i.log10 = Hc, i.log2 = Wc, i.max = Kc, i.min = zc, i.mod = Yc, i.mul = Zc, i.pow = Xc, i.random = ep, i.round = tp, i.sign = rp, i.sin = np, i.sinh = ip, i.sqrt = op, i.sub = sp, i.sum = ap, i.tan = lp, i.tanh = up, i.trunc = cp, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], t = 0; t < n.length;)e.hasOwnProperty(r = n[t++]) || (e[r] = this[r]);\n    return i.config(e), i;\n}\nfunction Vc(e, t) {\n    return new this(e).div(t);\n}\nfunction Bc(e) {\n    return new this(e).exp();\n}\nfunction Uc(e) {\n    return y(e = new this(e), e.e + 1, 3);\n}\nfunction Gc() {\n    var e, t, r = new this(0);\n    for(x = !1, e = 0; e < arguments.length;)if (t = new this(arguments[e++]), t.d) r.d && (r = r.plus(t.times(t)));\n    else {\n        if (t.s) return x = !0, new this(1 / 0);\n        r = t;\n    }\n    return x = !0, r.sqrt();\n}\nfunction ws(e) {\n    return e instanceof it || e && e.toStringTag === Ts || !1;\n}\nfunction Qc(e) {\n    return new this(e).ln();\n}\nfunction Jc(e, t) {\n    return new this(e).log(t);\n}\nfunction Wc(e) {\n    return new this(e).log(2);\n}\nfunction Hc(e) {\n    return new this(e).log(10);\n}\nfunction Kc() {\n    return As(this, arguments, \"lt\");\n}\nfunction zc() {\n    return As(this, arguments, \"gt\");\n}\nfunction Yc(e, t) {\n    return new this(e).mod(t);\n}\nfunction Zc(e, t) {\n    return new this(e).mul(t);\n}\nfunction Xc(e, t) {\n    return new this(e).pow(t);\n}\nfunction ep(e) {\n    var t, r, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ie(e, 1, ze), n = Math.ceil(e / b), this.crypto) if (crypto.getRandomValues) for(t = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = t[o], i >= 429e7 ? t[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(t = crypto.randomBytes(n *= 4); o < n;)i = t[o] + (t[o + 1] << 8) + (t[o + 2] << 16) + ((t[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(t, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(vs);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= b, n && e && (i = G(10, b - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) r = 0, a = [\n        0\n    ];\n    else {\n        for(r = -1; a[0] === 0; r -= b)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < b && (r -= b - n);\n    }\n    return s.e = r, s.d = a, s;\n}\nfunction tp(e) {\n    return y(e = new this(e), e.e + 1, this.rounding);\n}\nfunction rp(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction np(e) {\n    return new this(e).sin();\n}\nfunction ip(e) {\n    return new this(e).sinh();\n}\nfunction op(e) {\n    return new this(e).sqrt();\n}\nfunction sp(e, t) {\n    return new this(e).sub(t);\n}\nfunction ap() {\n    var e = 0, t = arguments, r = new this(t[e]);\n    for(x = !1; r.s && ++e < t.length;)r = r.plus(t[e]);\n    return x = !0, y(r, this.precision, this.rounding);\n}\nfunction lp(e) {\n    return new this(e).tan();\n}\nfunction up(e) {\n    return new this(e).tanh();\n}\nfunction cp(e) {\n    return y(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar it = m.constructor = ks(vi);\ntn = new it(tn);\nrn = new it(rn);\nvar xe = it;\nfunction wt(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(wt) : typeof e == \"object\" ? pp(e) ? dp(e) : yt(e, wt) : e;\n}\nfunction pp(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction dp({ $type: e, value: t }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(t);\n        case \"Bytes\":\n            return Buffer.from(t, \"base64\");\n        case \"DateTime\":\n            return new Date(t);\n        case \"Decimal\":\n            return new xe(t);\n        case \"Json\":\n            return JSON.parse(t);\n        default:\n            Fe(t, \"Unknown tagged value\");\n    }\n}\nfunction xt(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction Pt(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction ln(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nfunction vt(e) {\n    return it.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar Ms = k(fi());\nvar Ns = k(__webpack_require__(/*! fs */ \"fs\"));\nvar Ds = {\n    keyword: De,\n    entity: De,\n    value: (e)=>H(rt(e)),\n    punctuation: rt,\n    directive: De,\n    function: De,\n    variable: (e)=>H(rt(e)),\n    string: (e)=>H(qe(e)),\n    boolean: ke,\n    number: De,\n    comment: Gt\n};\nvar mp = (e)=>e, un = {}, fp = 0, P = {\n    manual: un.Prism && un.Prism.manual,\n    disableWorkerMessageHandler: un.Prism && un.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof he) {\n                let t = e;\n                return new he(t.type, P.util.encode(t.content), t.alias);\n            } else return Array.isArray(e) ? e.map(P.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++fp\n            }), e.__id;\n        },\n        clone: function e(t, r) {\n            let n, i, o = P.util.type(t);\n            switch(r = r || {}, o){\n                case \"Object\":\n                    if (i = P.util.objId(t), r[i]) return r[i];\n                    n = {}, r[i] = n;\n                    for(let s in t)t.hasOwnProperty(s) && (n[s] = e(t[s], r));\n                    return n;\n                case \"Array\":\n                    return i = P.util.objId(t), r[i] ? r[i] : (n = [], r[i] = n, t.forEach(function(s, a) {\n                        n[a] = e(s, r);\n                    }), n);\n                default:\n                    return t;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, t) {\n            let r = P.util.clone(P.languages[e]);\n            for(let n in t)r[n] = t[n];\n            return r;\n        },\n        insertBefore: function(e, t, r, n) {\n            n = n || P.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == t) for(let l in r)r.hasOwnProperty(l) && (o[l] = r[l]);\n                r.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, P.languages.DFS(P.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(t, r, n, i) {\n            i = i || {};\n            let o = P.util.objId;\n            for(let s in t)if (t.hasOwnProperty(s)) {\n                r.call(t, s, t[s], n || s);\n                let a = t[s], l = P.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, r, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, r, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, t, r) {\n        let n = {\n            code: e,\n            grammar: t,\n            language: r\n        };\n        return P.hooks.run(\"before-tokenize\", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run(\"after-tokenize\", n), he.stringify(P.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, t, r, n, i, o, s) {\n        for(let h in r){\n            if (!r.hasOwnProperty(h) || !r[h]) continue;\n            if (h == s) return;\n            let O = r[h];\n            O = P.util.type(O) === \"Array\" ? O : [\n                O\n            ];\n            for(let T = 0; T < O.length; ++T){\n                let S = O[T], C = S.inside, E = !!S.lookbehind, me = !!S.greedy, ae = 0, Bt = S.alias;\n                if (me && !S.pattern.global) {\n                    let U = S.pattern.toString().match(/[imuy]*$/)[0];\n                    S.pattern = RegExp(S.pattern.source, U + \"g\");\n                }\n                S = S.pattern || S;\n                for(let U = n, ne = i; U < t.length; ne += t[U].length, ++U){\n                    let Ie = t[U];\n                    if (t.length > e.length) return;\n                    if (Ie instanceof he) continue;\n                    if (me && U != t.length - 1) {\n                        S.lastIndex = ne;\n                        var p = S.exec(e);\n                        if (!p) break;\n                        var c = p.index + (E ? p[1].length : 0), d = p.index + p[0].length, a = U, l = ne;\n                        for(let _ = t.length; a < _ && (l < d || !t[a].type && !t[a - 1].greedy); ++a)l += t[a].length, c >= l && (++U, ne = l);\n                        if (t[U] instanceof he) continue;\n                        u = a - U, Ie = e.slice(ne, l), p.index -= ne;\n                    } else {\n                        S.lastIndex = 0;\n                        var p = S.exec(Ie), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    E && (ae = p[1] ? p[1].length : 0);\n                    var c = p.index + ae, p = p[0].slice(ae), d = c + p.length, f = Ie.slice(0, c), g = Ie.slice(d);\n                    let z = [\n                        U,\n                        u\n                    ];\n                    f && (++U, ne += f.length, z.push(f));\n                    let dt = new he(h, C ? P.tokenize(p, C) : p, Bt, p, me);\n                    if (z.push(dt), g && z.push(g), Array.prototype.splice.apply(t, z), u != 1 && P.matchGrammar(e, t, r, U, ne, !0, h), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, t) {\n        let r = [\n            e\n        ], n = t.rest;\n        if (n) {\n            for(let i in n)t[i] = n[i];\n            delete t.rest;\n        }\n        return P.matchGrammar(e, r, t, 0, 0, !1), r;\n    },\n    hooks: {\n        all: {},\n        add: function(e, t) {\n            let r = P.hooks.all;\n            r[e] = r[e] || [], r[e].push(t);\n        },\n        run: function(e, t) {\n            let r = P.hooks.all[e];\n            if (!(!r || !r.length)) for(var n = 0, i; i = r[n++];)i(t);\n        }\n    },\n    Token: he\n};\nP.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nP.languages.javascript = P.languages.extend(\"clike\", {\n    \"class-name\": [\n        P.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nP.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nP.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nP.languages.markup && P.languages.markup.tag.addInlined(\"script\", \"javascript\");\nP.languages.js = P.languages.javascript;\nP.languages.typescript = P.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nP.languages.ts = P.languages.typescript;\nfunction he(e, t, r, n, i) {\n    this.type = e, this.content = t, this.alias = r, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nhe.stringify = function(e, t) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(r) {\n        return he.stringify(r, t);\n    }).join(\"\") : gp(e.type)(e.content);\n};\nfunction gp(e) {\n    return Ds[e] || mp;\n}\nfunction _s(e) {\n    return hp(e, P.languages.javascript);\n}\nfunction hp(e, t) {\n    return P.tokenize(e, t).map((n)=>he.stringify(n)).join(\"\");\n}\nvar Fs = k(us());\nfunction Ls(e) {\n    return (0, Fs.default)(e);\n}\nvar cn = class e {\n    static read(t) {\n        let r;\n        try {\n            r = Ns.default.readFileSync(t, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(r);\n    }\n    static fromContent(t) {\n        let r = t.split(/\\r?\\n/);\n        return new e(1, r);\n    }\n    constructor(t, r){\n        this.firstLineNumber = t, this.lines = r;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(t, r) {\n        if (t < this.firstLineNumber || t > this.lines.length + this.firstLineNumber) return this;\n        let n = t - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = r(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(t) {\n        return new e(this.firstLineNumber, this.lines.map((r, n)=>t(r, this.firstLineNumber + n)));\n    }\n    lineAt(t) {\n        return this.lines[t - this.firstLineNumber];\n    }\n    prependSymbolAt(t, r) {\n        return this.mapLines((n, i)=>i === t ? `${r} ${n}` : `  ${n}`);\n    }\n    slice(t, r) {\n        let n = this.lines.slice(t - 1, r).join(`\n`);\n        return new e(t, Ls(n).split(`\n`));\n    }\n    highlight() {\n        let t = _s(this.toString());\n        return new e(this.firstLineNumber, t.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar yp = {\n    red: ce,\n    gray: Gt,\n    dim: Oe,\n    bold: H,\n    underline: X,\n    highlightSource: (e)=>e.highlight()\n}, bp = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Ep({ message: e, originalMethod: t, isPanic: r, callArguments: n }) {\n    return {\n        functionName: `prisma.${t}()`,\n        message: e,\n        isPanic: r ?? !1,\n        callArguments: n\n    };\n}\nfunction wp({ callsite: e, message: t, originalMethod: r, isPanic: n, callArguments: i }, o) {\n    let s = Ep({\n        message: t,\n        originalMethod: r,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = cn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = Pp(c), d = xp(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (g)=>g.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((g, h)=>o.gray(String(h).padStart(f)) + \" \" + g).mapLines((g)=>o.dim(g)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"\\u2192\"))), i) {\n            let g = p + f + 1;\n            g += 2, s.callArguments = (0, Ms.default)(i, g).slice(g);\n        }\n    }\n    return s;\n}\nfunction xp(e) {\n    let t = Object.keys(Je.ModelAction).join(\"|\"), n = new RegExp(String.raw`\\.(${t})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction Pp(e) {\n    let t = 0;\n    for(let r = 0; r < e.length; r++){\n        if (e.charAt(r) !== \" \") return t;\n        t++;\n    }\n    return t;\n}\nfunction vp({ functionName: e, location: t, message: r, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = t ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), t && a.push(s.underline(Tp(t))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(r), a.join(`\n`);\n}\nfunction Tp(e) {\n    let t = [\n        e.fileName\n    ];\n    return e.lineNumber && t.push(String(e.lineNumber)), e.columnNumber && t.push(String(e.columnNumber)), t.join(\":\");\n}\nfunction Tt(e) {\n    let t = e.showColors ? yp : bp, r;\n    return r = wp(e, t), vp(r, t);\n}\nvar Gs = k(Ai());\nfunction Vs(e, t, r) {\n    let n = Bs(e), i = Rp(n), o = Sp(i);\n    o ? pn(o, t, r) : t.addErrorMessage(()=>\"Unknown error\");\n}\nfunction Bs(e) {\n    return e.errors.flatMap((t)=>t.kind === \"Union\" ? Bs(t) : [\n            t\n        ]);\n}\nfunction Rp(e) {\n    let t = new Map, r = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            r.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = t.get(i);\n        o ? t.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Cp(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : t.set(i, n);\n    }\n    return r.push(...t.values()), r;\n}\nfunction Cp(e, t) {\n    return [\n        ...new Set(e.concat(t))\n    ];\n}\nfunction Sp(e) {\n    return xi(e, (t, r)=>{\n        let n = qs(t), i = qs(r);\n        return n !== i ? n - i : js(t) - js(r);\n    });\n}\nfunction qs(e) {\n    let t = 0;\n    return Array.isArray(e.selectionPath) && (t += e.selectionPath.length), Array.isArray(e.argumentPath) && (t += e.argumentPath.length), t;\n}\nfunction js(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(t, r){\n        this.name = t;\n        this.value = r;\n        this.isRequired = !1;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(t) {\n        let { colors: { green: r } } = t.context;\n        t.addMarginSymbol(r(this.isRequired ? \"+\" : \"?\")), t.write(r(this.name)), this.isRequired || t.write(r(\"?\")), t.write(r(\": \")), typeof this.value == \"string\" ? t.write(r(this.value)) : t.write(this.value);\n    }\n};\nvar Rt = class {\n    constructor(t = 0, r){\n        this.context = r;\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.currentIndent = t;\n    }\n    write(t) {\n        return typeof t == \"string\" ? this.currentLine += t : t.write(this), this;\n    }\n    writeJoined(t, r, n = (i, o)=>o.write(i)) {\n        let i = r.length - 1;\n        for(let o = 0; o < r.length; o++)n(r[o], this), o !== i && this.write(t);\n        return this;\n    }\n    writeLine(t) {\n        return this.write(t).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let t = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, t?.(), this;\n    }\n    withIndent(t) {\n        return this.indent(), t(this), this.unindent(), this;\n    }\n    afterNextNewline(t) {\n        return this.afterNextNewLineCallback = t, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(t) {\n        return this.marginSymbol = t, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + t.slice(1) : t;\n    }\n};\nvar dn = class {\n    constructor(t){\n        this.value = t;\n    }\n    write(t) {\n        t.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar mn = (e)=>e, fn = {\n    bold: mn,\n    red: mn,\n    green: mn,\n    dim: mn,\n    enabled: !1\n}, Us = {\n    bold: H,\n    red: ce,\n    green: qe,\n    dim: Oe,\n    enabled: !0\n}, Ct = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Pe = class {\n    constructor(t){\n        this.contents = t;\n        this.isUnderlined = !1;\n        this.color = (t)=>t;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(t) {\n        return this.color = t, this;\n    }\n    write(t) {\n        let r = t.getCurrentLineLength();\n        t.write(this.color(this.contents)), this.isUnderlined && t.afterNextNewline(()=>{\n            t.write(\" \".repeat(r)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar Ye = class {\n    constructor(){\n        this.hasError = !1;\n    }\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n};\nvar St = class extends Ye {\n    constructor(){\n        super(...arguments);\n        this.items = [];\n    }\n    addItem(r) {\n        return this.items.push(new dn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n)=>n.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let n = new Pe(\"[]\");\n        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);\n    }\n    writeWithItems(r) {\n        let { colors: n } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(Ct, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(n.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n};\nvar At = class e extends Ye {\n    constructor(){\n        super(...arguments);\n        this.fields = {};\n        this.suggestions = [];\n    }\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [n, ...i] = r, o = this.getField(n);\n        if (!o) return;\n        let s = o;\n        for (let a of i){\n            let l;\n            if (s.value instanceof e ? l = s.value.getField(a) : s.value instanceof St && (l = s.value.getField(Number(a))), !l) return;\n            s = l;\n        }\n        return s;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let n = this;\n        for (let i of r){\n            if (!(n instanceof e)) return;\n            let o = n.getSubSelectionValue(i);\n            if (!o) return;\n            n = o;\n        }\n        return n;\n    }\n    getDeepSelectionParent(r) {\n        let n = this.getSelectionParent();\n        if (!n) return;\n        let i = n;\n        for (let o of r){\n            let s = i.value.getFieldValue(o);\n            if (!s || !(s instanceof e)) return;\n            let a = s.getSelectionParent();\n            if (!a) return;\n            i = a;\n        }\n        return i;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let n = this.getField(\"include\")?.value.asObject();\n        if (n) return {\n            kind: \"include\",\n            value: n\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((i)=>i.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let n = Object.values(this.fields);\n        if (n.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, n);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let n = new Pe(\"{}\");\n        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);\n    }\n    writeWithContents(r, n) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(Ct, [\n                ...n,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar W = class extends Ye {\n    constructor(r){\n        super();\n        this.text = r;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(r) {\n        let n = new Pe(this.text);\n        this.hasError && n.underline().setColor(r.context.colors.red), r.write(n);\n    }\n    asObject() {}\n};\nvar nr = class {\n    constructor(){\n        this.fields = [];\n    }\n    addField(t, r) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${t}: ${r}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(t) {\n        let { colors: { green: r } } = t.context;\n        t.writeLine(r(\"{\")).withIndent(()=>{\n            t.writeJoined(Ct, this.fields).newLine();\n        }).write(r(\"}\")).addMarginSymbol(r(\"+\"));\n    }\n};\nfunction pn(e, t, r) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            Ip(e, t);\n            break;\n        case \"IncludeOnScalar\":\n            Op(e, t);\n            break;\n        case \"EmptySelection\":\n            kp(e, t, r);\n            break;\n        case \"UnknownSelectionField\":\n            Lp(e, t);\n            break;\n        case \"InvalidSelectionValue\":\n            Np(e, t);\n            break;\n        case \"UnknownArgument\":\n            Mp(e, t);\n            break;\n        case \"UnknownInputField\":\n            $p(e, t);\n            break;\n        case \"RequiredArgumentMissing\":\n            qp(e, t);\n            break;\n        case \"InvalidArgumentType\":\n            jp(e, t);\n            break;\n        case \"InvalidArgumentValue\":\n            Vp(e, t);\n            break;\n        case \"ValueTooLarge\":\n            Bp(e, t);\n            break;\n        case \"SomeFieldsMissing\":\n            Up(e, t);\n            break;\n        case \"TooManyFieldsGiven\":\n            Gp(e, t);\n            break;\n        case \"Union\":\n            Vs(e, t, r);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction Ip(e, t) {\n    let r = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    r && (r.getField(e.firstField)?.markAsError(), r.getField(e.secondField)?.markAsError()), t.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Op(e, t) {\n    let [r, n] = ir(e.selectionPath), i = e.outputType, o = t.arguments.getDeepSelectionParent(r)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new ue(s.name, \"true\"));\n    t.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${or(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction kp(e, t, r) {\n    let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            Dp(e, t, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            _p(e, t);\n            return;\n        }\n    }\n    if (r?.[xt(e.outputType.name)]) {\n        Fp(e, t);\n        return;\n    }\n    t.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction Dp(e, t, r) {\n    r.removeAllFields();\n    for (let n of e.outputType.fields)r.addSuggestion(new ue(n.name, \"false\"));\n    t.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction _p(e, t) {\n    let r = e.outputType, n = t.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), Ws(n, r)), t.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(r.name)} must not be empty. ${or(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(r.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction Fp(e, t) {\n    let r = new nr;\n    for (let i of e.outputType.fields)i.isRelation || r.addField(i.name, \"false\");\n    let n = new ue(\"omit\", r).makeRequired();\n    if (e.selectionPath.length === 0) t.arguments.addSuggestion(n);\n    else {\n        let [i, o] = ir(e.selectionPath), a = t.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new At;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    t.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Lp(e, t) {\n    let r = Hs(e.selectionPath, t);\n    if (r.parentKind !== \"unknown\") {\n        r.field.markAsError();\n        let n = r.parent;\n        switch(r.parentKind){\n            case \"select\":\n                Ws(n, e.outputType);\n                break;\n            case \"include\":\n                Qp(n, e.outputType);\n                break;\n            case \"omit\":\n                Jp(n, e.outputType);\n                break;\n        }\n    }\n    t.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${r.fieldName}\\``)}`\n        ];\n        return r.parentKind !== \"unknown\" && i.push(`for ${n.bold(r.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(or(n)), i.join(\" \");\n    });\n}\nfunction Np(e, t) {\n    let r = Hs(e.selectionPath, t);\n    r.parentKind !== \"unknown\" && r.field.value.markAsError(), t.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(r.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction Mp(e, t) {\n    let r = e.argumentPath[0], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(r)?.markAsError(), Wp(n, e.arguments)), t.addErrorMessage((i)=>Qs(i, r, e.arguments.map((o)=>o.name)));\n}\nfunction $p(e, t) {\n    let [r, n] = ir(e.argumentPath), i = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(r)?.asObject();\n        o && Ks(o, e.inputType);\n    }\n    t.addErrorMessage((o)=>Qs(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction Qs(e, t, r) {\n    let n = [\n        `Unknown argument \\`${e.red(t)}\\`.`\n    ], i = Kp(t, r);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), r.length > 0 && n.push(or(e)), n.join(\" \");\n}\nfunction qp(e, t) {\n    let r;\n    t.addErrorMessage((l)=>r?.value instanceof W && r.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = ir(e.argumentPath), s = new nr, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) if (r = a.getField(o), r && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n        for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n        a.addSuggestion(new ue(o, s).makeRequired());\n    } else {\n        let l = e.inputTypes.map(Js).join(\" | \");\n        a.addSuggestion(new ue(o, l).makeRequired());\n    }\n}\nfunction Js(e) {\n    return e.kind === \"list\" ? `${Js(e.elementType)}[]` : e.name;\n}\nfunction jp(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i)=>{\n        let o = gn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(r)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction Vp(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(r)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = gn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Bp(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof W && (i = s.text);\n    }\n    t.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(r)}\\``), s.join(\" \");\n    });\n}\nfunction Up(e, t) {\n    let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && Ks(i, e.inputType);\n    }\n    t.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(r)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${gn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(or(i)), o.join(\" \");\n    });\n}\nfunction Gp(e, t) {\n    let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    t.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(r)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${gn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction Ws(e, t) {\n    for (let r of t.fields)e.hasField(r.name) || e.addSuggestion(new ue(r.name, \"true\"));\n}\nfunction Qp(e, t) {\n    for (let r of t.fields)r.isRelation && !e.hasField(r.name) && e.addSuggestion(new ue(r.name, \"true\"));\n}\nfunction Jp(e, t) {\n    for (let r of t.fields)!e.hasField(r.name) && !r.isRelation && e.addSuggestion(new ue(r.name, \"true\"));\n}\nfunction Wp(e, t) {\n    for (let r of t)e.hasField(r.name) || e.addSuggestion(new ue(r.name, r.typeNames.join(\" | \")));\n}\nfunction Hs(e, t) {\n    let [r, n] = ir(e), i = t.arguments.getDeepSubSelectionValue(r)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction Ks(e, t) {\n    if (t.kind === \"object\") for (let r of t.fields)e.hasField(r.name) || e.addSuggestion(new ue(r.name, r.typeNames.join(\" | \")));\n}\nfunction ir(e) {\n    let t = [\n        ...e\n    ], r = t.pop();\n    if (!r) throw new Error(\"unexpected empty path\");\n    return [\n        t,\n        r\n    ];\n}\nfunction or({ green: e, enabled: t }) {\n    return \"Available options are \" + (t ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction gn(e, t) {\n    if (t.length === 1) return t[0];\n    let r = [\n        ...t\n    ], n = r.pop();\n    return `${r.join(\", \")} ${e} ${n}`;\n}\nvar Hp = 3;\nfunction Kp(e, t) {\n    let r = 1 / 0, n;\n    for (let i of t){\n        let o = (0, Gs.default)(e, i);\n        o > Hp || o < r && (r = o, n = i);\n    }\n    return n;\n}\nfunction zs(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nvar sr = class {\n    constructor(t, r, n, i, o){\n        this.modelName = t, this.name = r, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let t = this.isList ? \"List\" : \"\", r = this.isEnum ? \"Enum\" : \"\";\n        return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction It(e) {\n    return e instanceof sr;\n}\nvar hn = Symbol(), Ii = new WeakMap, Me = class {\n    constructor(t){\n        t === hn ? Ii.set(this, `Prisma.${this._getName()}`) : Ii.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Ii.get(this);\n    }\n}, ar = class extends Me {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, lr = class extends ar {\n};\nOi(lr, \"DbNull\");\nvar ur = class extends ar {\n};\nOi(ur, \"JsonNull\");\nvar cr = class extends ar {\n};\nOi(cr, \"AnyNull\");\nvar yn = {\n    classes: {\n        DbNull: lr,\n        JsonNull: ur,\n        AnyNull: cr\n    },\n    instances: {\n        DbNull: new lr(hn),\n        JsonNull: new ur(hn),\n        AnyNull: new cr(hn)\n    }\n};\nfunction Oi(e, t) {\n    Object.defineProperty(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n}\nvar Ys = \": \", bn = class {\n    constructor(t, r){\n        this.name = t;\n        this.value = r;\n        this.hasError = !1;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + Ys.length;\n    }\n    write(t) {\n        let r = new Pe(this.name);\n        this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(Ys).write(this.value);\n    }\n};\nvar ki = class {\n    constructor(t){\n        this.errorMessages = [];\n        this.arguments = t;\n    }\n    write(t) {\n        t.write(this.arguments);\n    }\n    addErrorMessage(t) {\n        this.errorMessages.push(t);\n    }\n    renderAllMessages(t) {\n        return this.errorMessages.map((r)=>r(t)).join(`\n`);\n    }\n};\nfunction Ot(e) {\n    return new ki(Zs(e));\n}\nfunction Zs(e) {\n    let t = new At;\n    for (let [r, n] of Object.entries(e)){\n        let i = new bn(r, Xs(n));\n        t.addField(i);\n    }\n    return t;\n}\nfunction Xs(e) {\n    if (typeof e == \"string\") return new W(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new W(String(e));\n    if (typeof e == \"bigint\") return new W(`${e}n`);\n    if (e === null) return new W(\"null\");\n    if (e === void 0) return new W(\"undefined\");\n    if (vt(e)) return new W(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new W(`Buffer.alloc(${e.byteLength})`) : new W(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let t = ln(e) ? e.toISOString() : \"Invalid Date\";\n        return new W(`new Date(\"${t}\")`);\n    }\n    return e instanceof Me ? new W(`Prisma.${e._getName()}`) : It(e) ? new W(`prisma.${zs(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? zp(e) : typeof e == \"object\" ? Zs(e) : new W(Object.prototype.toString.call(e));\n}\nfunction zp(e) {\n    let t = new St;\n    for (let r of e)t.addItem(Xs(r));\n    return t;\n}\nfunction En(e, t) {\n    let r = t === \"pretty\" ? Us : fn, n = e.renderAllMessages(r), i = new Rt(0, {\n        colors: r\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction wn({ args: e, errors: t, errorFormat: r, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = Ot(e);\n    for (let p of t)pn(p, a, s);\n    let { message: l, args: u } = En(a, r), c = Tt({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: r === \"pretty\",\n        callArguments: u\n    });\n    throw new J(c, {\n        clientVersion: o\n    });\n}\nvar ve = class {\n    constructor(){\n        this._map = new Map;\n    }\n    get(t) {\n        return this._map.get(t)?.value;\n    }\n    set(t, r) {\n        this._map.set(t, {\n            value: r\n        });\n    }\n    getOrCreate(t, r) {\n        let n = this._map.get(t);\n        if (n) return n.value;\n        let i = r();\n        return this.set(t, i), i;\n    }\n};\nfunction pr(e) {\n    let t;\n    return {\n        get () {\n            return t || (t = {\n                value: e()\n            }), t.value;\n        }\n    };\n}\nfunction Te(e) {\n    return e.replace(/^./, (t)=>t.toLowerCase());\n}\nfunction ta(e, t, r) {\n    let n = Te(r);\n    return !t.result || !(t.result.$allModels || t.result[n]) ? e : Yp({\n        ...e,\n        ...ea(t.name, e, t.result.$allModels),\n        ...ea(t.name, e, t.result[n])\n    });\n}\nfunction Yp(e) {\n    let t = new ve, r = (n, i)=>t.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>r(o, i)) : [\n                n\n            ]));\n    return yt(e, (n)=>({\n            ...n,\n            needs: r(n.name, new Set)\n        }));\n}\nfunction ea(e, t, r) {\n    return r ? yt(r, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: Zp(t, o, i)\n        })) : {};\n}\nfunction Zp(e, t, r) {\n    let n = e?.[t]?.compute;\n    return n ? (i)=>r({\n            ...i,\n            [t]: n(i)\n        }) : r;\n}\nfunction ra(e, t) {\n    if (!t) return e;\n    let r = {\n        ...e\n    };\n    for (let n of Object.values(t))if (e[n.name]) for (let i of n.needs)r[i] = !0;\n    return r;\n}\nfunction na(e, t) {\n    if (!t) return e;\n    let r = {\n        ...e\n    };\n    for (let n of Object.values(t))if (!e[n.name]) for (let i of n.needs)delete r[i];\n    return r;\n}\nvar xn = class {\n    constructor(t, r){\n        this.extension = t;\n        this.previous = r;\n        this.computedFieldsCache = new ve;\n        this.modelExtensionsCache = new ve;\n        this.queryCallbacksCache = new ve;\n        this.clientExtensions = pr(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = pr(()=>{\n            let t = this.previous?.getAllBatchQueryCallbacks() ?? [], r = this.extension.query?.$__internalBatch;\n            return r ? t.concat(r) : t;\n        });\n    }\n    getAllComputedFields(t) {\n        return this.computedFieldsCache.getOrCreate(t, ()=>ta(this.previous?.getAllComputedFields(t), this.extension, t));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(t) {\n        return this.modelExtensionsCache.getOrCreate(t, ()=>{\n            let r = Te(t);\n            return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t) : {\n                ...this.previous?.getAllModelExtensions(t),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[r]\n            };\n        });\n    }\n    getAllQueryCallbacks(t, r) {\n        return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(t, r) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations) ? n : (o[t] !== void 0 && (o[t][r] !== void 0 && i.push(o[t][r]), o[t].$allOperations !== void 0 && i.push(o[t].$allOperations)), t !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[r] !== void 0 && i.push(o.$allModels[r]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[r] !== void 0 && i.push(o[r]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, kt = class e {\n    constructor(t){\n        this.head = t;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(t) {\n        return new e(new xn(t));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(t) {\n        return new e(new xn(t, this.head));\n    }\n    getAllComputedFields(t) {\n        return this.head?.getAllComputedFields(t);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(t) {\n        return this.head?.getAllModelExtensions(t);\n    }\n    getAllQueryCallbacks(t, r) {\n        return this.head?.getAllQueryCallbacks(t, r) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar ia = Symbol(), dr = class {\n    constructor(t){\n        if (t !== ia) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(t) {\n        return t === void 0 ? Pn : t;\n    }\n}, Pn = new dr(ia);\nfunction Re(e) {\n    return e instanceof dr;\n}\nvar Xp = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, oa = \"explicitly `undefined` values are not allowed\";\nfunction vn({ modelName: e, action: t, args: r, runtimeDataModel: n, extensions: i = kt.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new Di({\n        runtimeDataModel: n,\n        modelName: e,\n        action: t,\n        rootArgs: r,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: Xp[t],\n        query: mr(r, p)\n    };\n}\nfunction mr({ select: e, include: t, ...r } = {}, n) {\n    let i;\n    return n.isPreviewFeatureOn(\"omitApi\") && (i = r.omit, delete r.omit), {\n        arguments: aa(r, n),\n        selection: ed(e, t, i, n)\n    };\n}\nfunction ed(e, t, r, n) {\n    return e ? (t ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : r && n.isPreviewFeatureOn(\"omitApi\") && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), id(e, n)) : td(n, t, r);\n}\nfunction td(e, t, r) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), t && rd(n, t, e), e.isPreviewFeatureOn(\"omitApi\") && nd(n, r, e), n;\n}\nfunction rd(e, t, r) {\n    for (let [n, i] of Object.entries(t)){\n        if (Re(i)) continue;\n        let o = r.nestSelection(n);\n        if (_i(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = r.findField(n);\n        if (s && s.kind !== \"object\" && r.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: r.getSelectionPath().concat(n),\n            outputType: r.getOutputTypeDescription()\n        }), s) {\n            e[n] = mr(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = mr(i, o);\n    }\n}\nfunction nd(e, t, r) {\n    let n = r.getComputedFields(), i = {\n        ...r.getGlobalOmit(),\n        ...t\n    }, o = na(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Re(a)) continue;\n        _i(a, r.nestSelection(s));\n        let l = r.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction id(e, t) {\n    let r = {}, n = t.getComputedFields(), i = ra(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Re(s)) continue;\n        let a = t.nestSelection(o);\n        _i(s, a);\n        let l = t.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Re(s)) {\n                r[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? r[o] = mr({}, a) : r[o] = !0;\n                continue;\n            }\n            r[o] = mr(s, a);\n        }\n    }\n    return r;\n}\nfunction sa(e, t) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Pt(e)) {\n        if (ln(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        t.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: t.getSelectionPath(),\n            argumentPath: t.getArgumentPath(),\n            argument: {\n                name: t.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (It(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return od(e, t);\n    if (ArrayBuffer.isView(e)) return {\n        $type: \"Bytes\",\n        value: Buffer.from(e).toString(\"base64\")\n    };\n    if (sd(e)) return e.values;\n    if (vt(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof Me) {\n        if (e !== yn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (ad(e)) return e.toJSON();\n    if (typeof e == \"object\") return aa(e, t);\n    t.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: t.getSelectionPath(),\n        argumentPath: t.getArgumentPath(),\n        argument: {\n            name: t.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction aa(e, t) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let r = {};\n    for(let n in e){\n        let i = e[n], o = t.nestArgument(n);\n        Re(i) || (i !== void 0 ? r[n] = sa(i, o) : t.isPreviewFeatureOn(\"strictUndefinedChecks\") && t.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: t.getSelectionPath(),\n            argument: {\n                name: t.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: oa\n        }));\n    }\n    return r;\n}\nfunction od(e, t) {\n    let r = [];\n    for(let n = 0; n < e.length; n++){\n        let i = t.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Re(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            t.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${t.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        r.push(sa(o, i));\n    }\n    return r;\n}\nfunction sd(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction ad(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction _i(e, t) {\n    e === void 0 && t.isPreviewFeatureOn(\"strictUndefinedChecks\") && t.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: t.getSelectionPath(),\n        underlyingError: oa\n    });\n}\nvar Di = class e {\n    constructor(t){\n        this.params = t;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(t) {\n        wn({\n            errors: [\n                t\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((t)=>({\n                    name: t.name,\n                    typeName: \"boolean\",\n                    isRelation: t.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(t) {\n        return this.params.previewFeatures.includes(t);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(t) {\n        return this.modelOrType?.fields.find((r)=>r.name === t);\n    }\n    nestSelection(t) {\n        let r = this.findField(t), n = r?.kind === \"object\" ? r.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(t)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[xt(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                Fe(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(t) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(t)\n        });\n    }\n};\nvar Dt = class {\n    constructor(t){\n        this._engine = t;\n    }\n    prometheus(t) {\n        return this._engine.metrics({\n            format: \"prometheus\",\n            ...t\n        });\n    }\n    json(t) {\n        return this._engine.metrics({\n            format: \"json\",\n            ...t\n        });\n    }\n};\nfunction la(e) {\n    return {\n        models: Fi(e.models),\n        enums: Fi(e.enums),\n        types: Fi(e.types)\n    };\n}\nfunction Fi(e) {\n    let t = {};\n    for (let { name: r, ...n } of e)t[r] = n;\n    return t;\n}\nfunction ua(e, t) {\n    let r = pr(()=>ld(t));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>r.get()\n    });\n}\nfunction ld(e) {\n    return {\n        datamodel: {\n            models: Li(e.models),\n            enums: Li(e.enums),\n            types: Li(e.types)\n        }\n    };\n}\nfunction Li(e) {\n    return Object.entries(e).map(([t, r])=>({\n            name: t,\n            ...r\n        }));\n}\nvar Ni = new WeakMap, Tn = \"$$PrismaTypedSql\", Mi = class {\n    constructor(t, r){\n        Ni.set(this, {\n            sql: t,\n            values: r\n        }), Object.defineProperty(this, Tn, {\n            value: Tn\n        });\n    }\n    get sql() {\n        return Ni.get(this).sql;\n    }\n    get values() {\n        return Ni.get(this).values;\n    }\n};\nfunction ca(e) {\n    return (...t)=>new Mi(e, t);\n}\nfunction pa(e) {\n    return e != null && e[Tn] === Tn;\n}\nfunction fr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return fr(e);\n        },\n        flatMap () {\n            return fr(e);\n        }\n    };\n}\nvar $i = class {\n    constructor(){\n        this.registeredErrors = [];\n    }\n    consumeError(t) {\n        return this.registeredErrors[t];\n    }\n    registerNewError(t) {\n        let r = 0;\n        for(; this.registeredErrors[r] !== void 0;)r++;\n        return this.registeredErrors[r] = {\n            error: t\n        }, r;\n    }\n}, qi = (e)=>{\n    let t = new $i, r = Ce(t, e.transactionContext.bind(e)), n = {\n        adapterName: e.adapterName,\n        errorRegistry: t,\n        queryRaw: Ce(t, e.queryRaw.bind(e)),\n        executeRaw: Ce(t, e.executeRaw.bind(e)),\n        provider: e.provider,\n        transactionContext: async (...i)=>(await r(...i)).map((s)=>ud(t, s))\n    };\n    return e.getConnectionInfo && (n.getConnectionInfo = pd(t, e.getConnectionInfo.bind(e))), n;\n}, ud = (e, t)=>{\n    let r = Ce(e, t.startTransaction.bind(t));\n    return {\n        adapterName: t.adapterName,\n        provider: t.provider,\n        queryRaw: Ce(e, t.queryRaw.bind(t)),\n        executeRaw: Ce(e, t.executeRaw.bind(t)),\n        startTransaction: async (...n)=>(await r(...n)).map((o)=>cd(e, o))\n    };\n}, cd = (e, t)=>({\n        adapterName: t.adapterName,\n        provider: t.provider,\n        options: t.options,\n        queryRaw: Ce(e, t.queryRaw.bind(t)),\n        executeRaw: Ce(e, t.executeRaw.bind(t)),\n        commit: Ce(e, t.commit.bind(t)),\n        rollback: Ce(e, t.rollback.bind(t))\n    });\nfunction Ce(e, t) {\n    return async (...r)=>{\n        try {\n            return await t(...r);\n        } catch (n) {\n            let i = e.registerNewError(n);\n            return fr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction pd(e, t) {\n    return (...r)=>{\n        try {\n            return t(...r);\n        } catch (n) {\n            let i = e.registerNewError(n);\n            return fr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar Wl = k(oi());\nvar Hl = __webpack_require__(/*! async_hooks */ \"async_hooks\"), Kl = __webpack_require__(/*! events */ \"events\"), zl = k(__webpack_require__(/*! fs */ \"fs\")), Fr = k(__webpack_require__(/*! path */ \"path\"));\nvar oe = class e {\n    constructor(t, r){\n        if (t.length - 1 !== r.length) throw t.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`);\n        let n = r.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = t[0];\n        let i = 0, o = 0;\n        for(; i < r.length;){\n            let s = r[i++], a = t[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let t = this.strings.length, r = 1, n = this.strings[0];\n        for(; r < t;)n += `?${this.strings[r++]}`;\n        return n;\n    }\n    get statement() {\n        let t = this.strings.length, r = 1, n = this.strings[0];\n        for(; r < t;)n += `:${r}${this.strings[r++]}`;\n        return n;\n    }\n    get text() {\n        let t = this.strings.length, r = 1, n = this.strings[0];\n        for(; r < t;)n += `$${r}${this.strings[r++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction da(e, t = \",\", r = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        r,\n        ...Array(e.length - 1).fill(t),\n        n\n    ], e);\n}\nfunction ji(e) {\n    return new oe([\n        e\n    ], []);\n}\nvar ma = ji(\"\");\nfunction Vi(e, ...t) {\n    return new oe(e, t);\n}\nfunction gr(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (t) {\n            return e[t];\n        }\n    };\n}\nfunction re(e, t) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return t();\n        }\n    };\n}\nfunction ot(e) {\n    let t = new ve;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (r) {\n            return t.getOrCreate(r, ()=>e.getPropertyValue(r));\n        },\n        getPropertyDescriptor (r) {\n            return e.getPropertyDescriptor?.(r);\n        }\n    };\n}\nvar Rn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Cn(e) {\n    let t = new Set(e);\n    return {\n        getOwnPropertyDescriptor: ()=>Rn,\n        has: (r, n)=>t.has(n),\n        set: (r, n, i)=>t.add(n) && Reflect.set(r, n, i),\n        ownKeys: ()=>[\n                ...t\n            ]\n    };\n}\nvar fa = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction Se(e, t) {\n    let r = dd(t), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = r.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = r.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = ga(Reflect.ownKeys(o), r), a = ga(Array.from(r.keys()), r);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return r.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = r.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...Rn,\n                ...l?.getPropertyDescriptor(s)\n            } : Rn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        }\n    });\n    return i[fa] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[fa], o;\n    }, i;\n}\nfunction dd(e) {\n    let t = new Map;\n    for (let r of e){\n        let n = r.getKeys();\n        for (let i of n)t.set(i, r);\n    }\n    return t;\n}\nfunction ga(e, t) {\n    return e.filter((r)=>t.get(r)?.has?.(r) ?? !0);\n}\nfunction _t(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Ft(e, t) {\n    return {\n        batch: e,\n        transaction: t?.kind === \"batch\" ? {\n            isolationLevel: t.options.isolationLevel\n        } : void 0\n    };\n}\nfunction ha(e) {\n    if (e === void 0) return \"\";\n    let t = Ot(e);\n    return new Rt(0, {\n        colors: fn\n    }).write(t).toString();\n}\nvar md = \"P2037\";\nfunction st({ error: e, user_facing_error: t }, r, n) {\n    return t.error_code ? new V(fd(t, n), {\n        code: t.error_code,\n        clientVersion: r,\n        meta: t.meta,\n        batchRequestIdx: t.batch_request_idx\n    }) : new B(e, {\n        clientVersion: r,\n        batchRequestIdx: t.batch_request_idx\n    });\n}\nfunction fd(e, t) {\n    let r = e.message;\n    return (t === \"postgresql\" || t === \"postgres\" || t === \"mysql\") && e.error_code === md && (r += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r;\n}\nvar hr = \"<unknown>\";\nfunction ya(e) {\n    var t = e.split(`\n`);\n    return t.reduce(function(r, n) {\n        var i = yd(n) || Ed(n) || Pd(n) || Cd(n) || Td(n);\n        return i && r.push(i), r;\n    }, []);\n}\nvar gd = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, hd = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction yd(e) {\n    var t = gd.exec(e);\n    if (!t) return null;\n    var r = t[2] && t[2].indexOf(\"native\") === 0, n = t[2] && t[2].indexOf(\"eval\") === 0, i = hd.exec(t[2]);\n    return n && i != null && (t[2] = i[1], t[3] = i[2], t[4] = i[3]), {\n        file: r ? null : t[2],\n        methodName: t[1] || hr,\n        arguments: r ? [\n            t[2]\n        ] : [],\n        lineNumber: t[3] ? +t[3] : null,\n        column: t[4] ? +t[4] : null\n    };\n}\nvar bd = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Ed(e) {\n    var t = bd.exec(e);\n    return t ? {\n        file: t[2],\n        methodName: t[1] || hr,\n        arguments: [],\n        lineNumber: +t[3],\n        column: t[4] ? +t[4] : null\n    } : null;\n}\nvar wd = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, xd = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Pd(e) {\n    var t = wd.exec(e);\n    if (!t) return null;\n    var r = t[3] && t[3].indexOf(\" > eval\") > -1, n = xd.exec(t[3]);\n    return r && n != null && (t[3] = n[1], t[4] = n[2], t[5] = null), {\n        file: t[3],\n        methodName: t[1] || hr,\n        arguments: t[2] ? t[2].split(\",\") : [],\n        lineNumber: t[4] ? +t[4] : null,\n        column: t[5] ? +t[5] : null\n    };\n}\nvar vd = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction Td(e) {\n    var t = vd.exec(e);\n    return t ? {\n        file: t[3],\n        methodName: t[1] || hr,\n        arguments: [],\n        lineNumber: +t[4],\n        column: t[5] ? +t[5] : null\n    } : null;\n}\nvar Rd = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Cd(e) {\n    var t = Rd.exec(e);\n    return t ? {\n        file: t[2],\n        methodName: t[1] || hr,\n        arguments: [],\n        lineNumber: +t[3],\n        column: t[4] ? +t[4] : null\n    } : null;\n}\nvar Bi = class {\n    getLocation() {\n        return null;\n    }\n}, Ui = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let t = this._error.stack;\n        if (!t) return null;\n        let n = ya(t).find((i)=>{\n            if (!i.file) return !1;\n            let o = mi(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Ze(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new Bi : new Ui;\n}\nvar ba = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction Lt(e = {}) {\n    let t = Ad(e);\n    return Object.entries(t).reduce((n, [i, o])=>(ba[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Ad(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Sn(e = {}) {\n    return (t)=>(typeof e._count == \"boolean\" && (t._count = t._count._all), t);\n}\nfunction Ea(e, t) {\n    let r = Sn(e);\n    return t({\n        action: \"aggregate\",\n        unpacker: r,\n        argsMapper: Lt\n    })(e);\n}\nfunction Id(e = {}) {\n    let { select: t, ...r } = e;\n    return typeof t == \"object\" ? Lt({\n        ...r,\n        _count: t\n    }) : Lt({\n        ...r,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Od(e = {}) {\n    return typeof e.select == \"object\" ? (t)=>Sn(e)(t)._count : (t)=>Sn(e)(t)._count._all;\n}\nfunction wa(e, t) {\n    return t({\n        action: \"count\",\n        unpacker: Od(e),\n        argsMapper: Id\n    })(e);\n}\nfunction kd(e = {}) {\n    let t = Lt(e);\n    if (Array.isArray(t.by)) for (let r of t.by)typeof r == \"string\" && (t.select[r] = !0);\n    else typeof t.by == \"string\" && (t.select[t.by] = !0);\n    return t;\n}\nfunction Dd(e = {}) {\n    return (t)=>(typeof e?._count == \"boolean\" && t.forEach((r)=>{\n            r._count = r._count._all;\n        }), t);\n}\nfunction xa(e, t) {\n    return t({\n        action: \"groupBy\",\n        unpacker: Dd(e),\n        argsMapper: kd\n    })(e);\n}\nfunction Pa(e, t, r) {\n    if (t === \"aggregate\") return (n)=>Ea(n, r);\n    if (t === \"count\") return (n)=>wa(n, r);\n    if (t === \"groupBy\") return (n)=>xa(n, r);\n}\nfunction va(e, t) {\n    let r = t.fields.filter((i)=>!i.relationName), n = wi(r, (i)=>i.name);\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new sr(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...Cn(Object.keys(n))\n    });\n}\nvar Ta = (e)=>Array.isArray(e) ? e : e.split(\".\"), Gi = (e, t)=>Ta(t).reduce((r, n)=>r && r[n], e), Ra = (e, t, r)=>Ta(t).reduceRight((n, i, o, s)=>Object.assign({}, Gi(e, s.slice(0, o)), {\n            [i]: n\n        }), r);\nfunction _d(e, t) {\n    return e === void 0 || t === void 0 ? [] : [\n        ...t,\n        \"select\",\n        e\n    ];\n}\nfunction Fd(e, t, r) {\n    return t === void 0 ? e ?? {} : Ra(t, r, e || !0);\n}\nfunction Qi(e, t, r, n, i, o) {\n    let a = e._runtimeDataModel.models[t].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Ze(e._errorFormat), c = _d(n, i), p = Fd(l, o, c), d = r({\n            dataPath: c,\n            callsite: u\n        })(p), f = Ld(e, t);\n        return new Proxy(d, {\n            get (g, h) {\n                if (!f.includes(h)) return g[h];\n                let T = [\n                    a[h].type,\n                    r,\n                    h\n                ], S = [\n                    c,\n                    p\n                ];\n                return Qi(e, ...T, ...S);\n            },\n            ...Cn([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction Ld(e, t) {\n    return e._runtimeDataModel.models[t].fields.filter((r)=>r.kind === \"object\").map((r)=>r.name);\n}\nfunction Ca(e, t, r, n) {\n    return e === Je.ModelAction.findFirstOrThrow || e === Je.ModelAction.findUniqueOrThrow ? Nd(t, r, n) : n;\n}\nfunction Nd(e, t, r) {\n    return async (n)=>{\n        if (\"rejectOnNotFound\" in n.args) {\n            let o = Tt({\n                originalMethod: n.clientMethod,\n                callsite: n.callsite,\n                message: \"'rejectOnNotFound' option is not supported\"\n            });\n            throw new J(o, {\n                clientVersion: t\n            });\n        }\n        return await r(n).catch((o)=>{\n            throw o instanceof V && o.code === \"P2025\" ? new Le(`No ${e} found`, t) : o;\n        });\n    };\n}\nvar Md = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], $d = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction Ji(e, t) {\n    let r = e._extensions.getAllModelExtensions(t) ?? {}, n = [\n        qd(e, t),\n        Vd(e, t),\n        gr(r),\n        re(\"name\", ()=>t),\n        re(\"$name\", ()=>t),\n        re(\"$parent\", ()=>e._appliedParent)\n    ];\n    return Se({}, n);\n}\nfunction qd(e, t) {\n    let r = Te(t), n = Object.keys(Je.ModelAction).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (l)=>e._request(l);\n            s = Ca(o, t, e._clientVersion, s);\n            let a = (l)=>(u)=>{\n                    let c = Ze(e._errorFormat);\n                    return e._createPrismaPromise((p)=>{\n                        let d = {\n                            args: u,\n                            dataPath: [],\n                            action: o,\n                            model: t,\n                            clientMethod: `${r}.${i}`,\n                            jsModelName: r,\n                            transaction: p,\n                            callsite: c\n                        };\n                        return s({\n                            ...d,\n                            ...l\n                        });\n                    });\n                };\n            return Md.includes(o) ? Qi(e, t, a) : jd(i) ? Pa(e, i, a) : a({});\n        }\n    };\n}\nfunction jd(e) {\n    return $d.includes(e);\n}\nfunction Vd(e, t) {\n    return ot(re(\"fields\", ()=>{\n        let r = e._runtimeDataModel.models[t];\n        return va(t, r);\n    }));\n}\nfunction Sa(e) {\n    return e.replace(/^./, (t)=>t.toUpperCase());\n}\nvar Wi = Symbol();\nfunction yr(e) {\n    let t = [\n        Bd(e),\n        re(Wi, ()=>e),\n        re(\"$parent\", ()=>e._appliedParent)\n    ], r = e._extensions.getAllClientExtensions();\n    return r && t.push(gr(r)), Se(e, t);\n}\nfunction Bd(e) {\n    let t = Object.keys(e._runtimeDataModel.models), r = t.map(Te), n = [\n        ...new Set(t.concat(r))\n    ];\n    return ot({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Sa(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return Ji(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return Ji(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!r.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Aa(e) {\n    return e[Wi] ? e[Wi] : e;\n}\nfunction Ia(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let r = e.client.__AccelerateEngine;\n        this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);\n    }\n    let t = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return yr(t);\n}\nfunction Oa({ result: e, modelName: t, select: r, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(t);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(_t(u));\n        } else if (r) {\n            if (!r[l.name]) continue;\n            let u = l.needs.filter((c)=>!r[c]);\n            u.length > 0 && a.push(_t(u));\n        }\n        Ud(e, l.needs) && s.push(Gd(l, Se(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? Se(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction Ud(e, t) {\n    return t.every((r)=>Ei(e, r));\n}\nfunction Gd(e, t) {\n    return ot(re(e.name, ()=>e.compute(t)));\n}\nfunction An({ visitor: e, result: t, args: r, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(t)) {\n        for(let s = 0; s < t.length; s++)t[s] = An({\n            result: t[s],\n            args: r,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return t;\n    }\n    let o = e(t, i, r) ?? t;\n    return r.include && ka({\n        includeOrSelect: r.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), r.select && ka({\n        includeOrSelect: r.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction ka({ includeOrSelect: e, result: t, parentModelName: r, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || t[o] == null || Re(s)) continue;\n        let l = n.models[r].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        t[o] = An({\n            visitor: i,\n            result: t[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction Da({ result: e, modelName: t, args: r, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[t] ? e : An({\n        result: e,\n        args: r ?? {},\n        modelName: t,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Te(l);\n            return Oa({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nfunction _a(e) {\n    if (e instanceof oe) return Qd(e);\n    if (Array.isArray(e)) {\n        let r = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)r[n] = br(e[n]);\n        return r;\n    }\n    let t = {};\n    for(let r in e)t[r] = br(e[r]);\n    return t;\n}\nfunction Qd(e) {\n    return new oe(e.strings, e.values);\n}\nfunction br(e) {\n    if (typeof e != \"object\" || e == null || e instanceof Me || It(e)) return e;\n    if (vt(e)) return new xe(e.toFixed());\n    if (Pt(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let t = e.length, r;\n        for(r = Array(t); t--;)r[t] = br(e[t]);\n        return r;\n    }\n    if (typeof e == \"object\") {\n        let t = {};\n        for(let r in e)r === \"__proto__\" ? Object.defineProperty(t, r, {\n            value: br(e[r]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : t[r] = br(e[r]);\n        return t;\n    }\n    Fe(e, \"Unknown value\");\n}\nfunction La(e, t, r, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = t.customDataProxyFetch;\n        return \"transaction\" in t && i !== void 0 && (t.transaction?.kind === \"batch\" && t.transaction.lock.then(), t.transaction = i), n === r.length ? e._executeRequest(t) : r[n]({\n            model: t.model,\n            operation: t.model ? t.action : t.clientMethod,\n            args: _a(t.args ?? {}),\n            __internalParams: t,\n            query: (s, a = t)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = qa(o, l), a.args = s, La(e, a, r, n + 1);\n            }\n        });\n    });\n}\nfunction Na(e, t) {\n    let { jsModelName: r, action: n, clientMethod: i } = t, o = r ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(t);\n    let s = e._extensions.getAllQueryCallbacks(r ?? \"$none\", o);\n    return La(e, t, s);\n}\nfunction Ma(e) {\n    return (t)=>{\n        let r = {\n            requests: t\n        }, n = t[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? $a(r, n, 0, e) : e(r);\n    };\n}\nfunction $a(e, t, r, n) {\n    if (r === t.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return t[r]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = qa(i, l), $a(a, t, r + 1, n);\n        }\n    });\n}\nvar Fa = (e)=>e;\nfunction qa(e = Fa, t = Fa) {\n    return (r)=>e(t(r));\n}\nvar ja = L(\"prisma:client\"), Va = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction Ba({ postinstall: e, ciName: t, clientVersion: r }) {\n    if (ja(\"checkPlatformCaching:postinstall\", e), ja(\"checkPlatformCaching:ciName\", t), e === !0 && t && t in Va) {\n        let n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${Va[t]}-build`;\n        throw console.error(n), new R(n, r);\n    }\n}\nfunction Ua(e, t) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [t[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Jd = \"Cloudflare-Workers\", Wd = \"node\";\nfunction Ga() {\n    return typeof Netlify == \"object\" ? \"netlify\" : typeof EdgeRuntime == \"string\" ? \"edge-light\" : globalThis.navigator?.userAgent === Jd ? \"workerd\" : globalThis.Deno ? \"deno\" : globalThis.__lagon__ ? \"lagon\" : globalThis.process?.release?.name === Wd ? \"node\" : globalThis.Bun ? \"bun\" : globalThis.fastly ? \"fastly\" : \"unknown\";\n}\nvar Hd = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction In() {\n    let e = Ga();\n    return {\n        id: e,\n        prettyName: Hd[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar Ka = k(__webpack_require__(/*! fs */ \"fs\")), Er = k(__webpack_require__(/*! path */ \"path\"));\nfunction On(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `Add \"${t}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Kd(e)}`;\n}\nfunction Kd(e) {\n    let { generator: t, generatorBinaryTargets: r, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...r,\n        i\n    ];\n    return hi({\n        ...t,\n        binaryTargets: o\n    });\n}\nfunction Xe(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${t}\".`;\n}\nfunction et(e) {\n    let { searchedLocations: t } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(t)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction Qa(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `${Xe(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${t}\".\n${On(e)}\n\n${et(e)}`;\n}\nfunction kn(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Dn(e) {\n    let { errorStack: t } = e;\n    return t?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction Ja(e) {\n    let { queryEngineName: t } = e;\n    return `${Xe(e)}${Dn(e)}\n\nThis is likely caused by a bundler that has not copied \"${t}\" next to the resulting bundle.\nEnsure that \"${t}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${kn(\"engine-not-found-bundler-investigation\")}\n\n${et(e)}`;\n}\nfunction Wa(e) {\n    let { runtimeBinaryTarget: t, generatorBinaryTargets: r } = e, n = r.find((i)=>i.native);\n    return `${Xe(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${t}\".\n${On(e)}\n\n${et(e)}`;\n}\nfunction Ha(e) {\n    let { queryEngineName: t } = e;\n    return `${Xe(e)}${Dn(e)}\n\nThis is likely caused by tooling that has not copied \"${t}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${t}\" has been copied to \"${e.expectedLocation}\".\n\n${kn(\"engine-not-found-tooling-investigation\")}\n\n${et(e)}`;\n}\nvar zd = L(\"prisma:client:engines:resolveEnginePath\"), Yd = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function za(e, t) {\n    let r = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? t.prismaPath;\n    if (r !== void 0) return r;\n    let { enginePath: n, searchedLocations: i } = await Zd(e, t);\n    if (zd(\"enginePath\", n), n !== void 0 && e === \"binary\" && li(n), n !== void 0) return t.prismaPath = n;\n    let o = await nt(), s = t.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(Yd()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: t.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: Ya(e, o),\n        expectedLocation: Er.default.relative(process.cwd(), t.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = Wa(c) : l ? p = Qa(c) : u ? p = Ja(c) : p = Ha(c), new R(p, t.clientVersion);\n}\nasync function Zd(engineType, config) {\n    let binaryTarget = await nt(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        Er.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        Er.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(Yo());\n    for (let e of searchLocations){\n        let t = Ya(engineType, binaryTarget), r = Er.default.join(e, t);\n        if (searchedLocations.push(e), Ka.default.existsSync(r)) return {\n            enginePath: r,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction Ya(e, t) {\n    return e === \"library\" ? qr(t, \"fs\") : `query-engine-${t}${t === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar Hi = k(bi());\nfunction Za(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t)=>`${t[0]}5`) : \"\";\n}\nfunction Xa(e) {\n    return e.split(`\n`).map((t)=>t.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar el = k(hs());\nfunction tl({ title: e, user: t = \"prisma\", repo: r = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, el.default)({\n        user: t,\n        repo: r,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction rl({ version: e, binaryTarget: t, title: r, description: n, engineVersion: i, database: o, query: s }) {\n    let a = So(6e3 - (s?.length ?? 0)), l = Xa((0, Hi.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, Hi.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${t?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? Za(s) : \"\"}\n\\`\\`\\`\n`), p = tl({\n        title: r,\n        body: c\n    });\n    return `${r}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${X(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction Nt({ inlineDatasources: e, overrideDatasources: t, env: r, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = t[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = r[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new R(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new R(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar _n = class extends Error {\n    constructor(t, r){\n        super(t), this.clientVersion = r.clientVersion, this.cause = r.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends _n {\n    constructor(t, r){\n        super(t, r), this.isRetryable = r.isRetryable ?? !0;\n    }\n};\nfunction A(e, t) {\n    return {\n        ...e,\n        isRetryable: t\n    };\n}\nvar Mt = class extends se {\n    constructor(r){\n        super(\"This request must be retried\", A(r, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nw(Mt, \"ForcedRetryError\");\nvar at = class extends se {\n    constructor(r, n){\n        super(r, A(n, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P6001\";\n    }\n};\nw(at, \"InvalidDatasourceError\");\nvar lt = class extends se {\n    constructor(r, n){\n        super(r, A(n, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nw(lt, \"NotImplementedYetError\");\nvar q = class extends se {\n    constructor(t, r){\n        super(t, r), this.response = r.response;\n        let n = this.response.headers.get(\"prisma-request-id\");\n        if (n) {\n            let i = `(The request id was: ${n})`;\n            this.message = this.message + \" \" + i;\n        }\n    }\n};\nvar ut = class extends q {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", A(r, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nw(ut, \"SchemaMissingError\");\nvar Ki = \"This request could not be understood by the server\", wr = class extends q {\n    constructor(r, n, i){\n        super(n || Ki, A(r, !1));\n        this.name = \"BadRequestError\";\n        this.code = \"P5000\";\n        i && (this.code = i);\n    }\n};\nw(wr, \"BadRequestError\");\nvar xr = class extends q {\n    constructor(r, n){\n        super(\"Engine not started: healthcheck timeout\", A(r, !0));\n        this.name = \"HealthcheckTimeoutError\";\n        this.code = \"P5013\";\n        this.logs = n;\n    }\n};\nw(xr, \"HealthcheckTimeoutError\");\nvar Pr = class extends q {\n    constructor(r, n, i){\n        super(n, A(r, !0));\n        this.name = \"EngineStartupError\";\n        this.code = \"P5014\";\n        this.logs = i;\n    }\n};\nw(Pr, \"EngineStartupError\");\nvar vr = class extends q {\n    constructor(r){\n        super(\"Engine version is not supported\", A(r, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nw(vr, \"EngineVersionNotSupportedError\");\nvar zi = \"Request timed out\", Tr = class extends q {\n    constructor(r, n = zi){\n        super(n, A(r, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nw(Tr, \"GatewayTimeoutError\");\nvar Xd = \"Interactive transaction error\", Rr = class extends q {\n    constructor(r, n = Xd){\n        super(n, A(r, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nw(Rr, \"InteractiveTransactionError\");\nvar em = \"Request parameters are invalid\", Cr = class extends q {\n    constructor(r, n = em){\n        super(n, A(r, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nw(Cr, \"InvalidRequestError\");\nvar Yi = \"Requested resource does not exist\", Sr = class extends q {\n    constructor(r, n = Yi){\n        super(n, A(r, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nw(Sr, \"NotFoundError\");\nvar Zi = \"Unknown server error\", $t = class extends q {\n    constructor(r, n, i){\n        super(n || Zi, A(r, !0));\n        this.name = \"ServerError\";\n        this.code = \"P5006\";\n        this.logs = i;\n    }\n};\nw($t, \"ServerError\");\nvar Xi = \"Unauthorized, check your connection string\", Ar = class extends q {\n    constructor(r, n = Xi){\n        super(n, A(r, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nw(Ar, \"UnauthorizedError\");\nvar eo = \"Usage exceeded, retry again later\", Ir = class extends q {\n    constructor(r, n = eo){\n        super(n, A(r, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nw(Ir, \"UsageExceededError\");\nasync function tm(e) {\n    let t;\n    try {\n        t = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let r = JSON.parse(t);\n        if (typeof r == \"string\") switch(r){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: r\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: r\n                };\n        }\n        if (typeof r == \"object\" && r !== null) {\n            if (\"is_panic\" in r && \"message\" in r && \"error_code\" in r) return {\n                type: \"QueryEngineError\",\n                body: r\n            };\n            if (\"EngineNotStarted\" in r || \"InteractiveTransactionMisrouted\" in r || \"InvalidRequestError\" in r) {\n                let n = Object.values(r)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: r\n                } : {\n                    type: \"DataProxyError\",\n                    body: r\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: r\n        };\n    } catch  {\n        return t === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: t\n        };\n    }\n}\nasync function Or(e, t) {\n    if (e.ok) return;\n    let r = {\n        clientVersion: t,\n        response: e\n    }, n = await tm(e);\n    if (n.type === \"QueryEngineError\") throw new V(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: t\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new $t(r, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new ut(r);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new vr(r);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Pr(r, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new R(i, t, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new xr(r, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Rr(r, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new Cr(r, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new Ar(r, qt(Xi, n));\n    if (e.status === 404) return new Sr(r, qt(Yi, n));\n    if (e.status === 429) throw new Ir(r, qt(eo, n));\n    if (e.status === 504) throw new Tr(r, qt(zi, n));\n    if (e.status >= 500) throw new $t(r, qt(Zi, n));\n    if (e.status >= 400) throw new wr(r, qt(Ki, n));\n}\nfunction qt(e, t) {\n    return t.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(t)}`;\n}\nfunction nl(e) {\n    let t = Math.pow(2, e) * 50, r = Math.ceil(Math.random() * t) - Math.ceil(t / 2), n = t + r;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction il(e) {\n    let t = new TextEncoder().encode(e), r = \"\", n = t.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = t[p] << 16 | t[p + 1] << 8 | t[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, r += $e[s] + $e[a] + $e[l] + $e[u];\n    return i == 1 ? (c = t[o], s = (c & 252) >> 2, a = (c & 3) << 4, r += $e[s] + $e[a] + \"==\") : i == 2 && (c = t[o] << 8 | t[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, r += $e[s] + $e[a] + $e[l] + \"=\"), r;\n}\nfunction ol(e) {\n    if (!!e.generator?.previewFeatures.some((r)=>r.toLowerCase().includes(\"metrics\"))) throw new R(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nfunction rm(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction sl(e) {\n    return new Date(rm(e));\n}\nvar al = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar kr = class extends se {\n    constructor(r, n){\n        super(`Cannot fetch data from service:\n${r}`, A(n, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nw(kr, \"RequestError\");\nasync function ct(e, t, r = (n)=>n) {\n    let n = t.clientVersion;\n    try {\n        return typeof fetch == \"function\" ? await r(fetch)(e, t) : await r(to)(e, t);\n    } catch (i) {\n        let o = i.message ?? \"Unknown error\";\n        throw new kr(o, {\n            clientVersion: n\n        });\n    }\n}\nfunction im(e) {\n    return {\n        ...e.headers,\n        \"Content-Type\": \"application/json\"\n    };\n}\nfunction om(e) {\n    return {\n        method: e.method,\n        headers: im(e)\n    };\n}\nfunction sm(e, t) {\n    return {\n        text: ()=>Promise.resolve(Buffer.concat(e).toString()),\n        json: ()=>Promise.resolve().then(()=>JSON.parse(Buffer.concat(e).toString())),\n        ok: t.statusCode >= 200 && t.statusCode <= 299,\n        status: t.statusCode,\n        url: t.url,\n        headers: new ro(t.headers)\n    };\n}\nasync function to(e, t = {}) {\n    let r = am(\"https\"), n = om(t), i = [], { origin: o } = new URL(e);\n    return new Promise((s, a)=>{\n        let l = r.request(e, n, (u)=>{\n            let { statusCode: c, headers: { location: p } } = u;\n            c >= 301 && c <= 399 && p && (p.startsWith(\"http\") === !1 ? s(to(`${o}${p}`, t)) : s(to(p, t))), u.on(\"data\", (d)=>i.push(d)), u.on(\"end\", ()=>s(sm(i, u))), u.on(\"error\", a);\n        });\n        l.on(\"error\", a), l.end(t.body ?? \"\");\n    });\n}\nvar am = undefined, ro = class {\n    constructor(t = {}){\n        this.headers = new Map;\n        for (let [r, n] of Object.entries(t))if (typeof n == \"string\") this.headers.set(r, n);\n        else if (Array.isArray(n)) for (let i of n)this.headers.set(r, i);\n    }\n    append(t, r) {\n        this.headers.set(t, r);\n    }\n    delete(t) {\n        this.headers.delete(t);\n    }\n    get(t) {\n        return this.headers.get(t) ?? null;\n    }\n    has(t) {\n        return this.headers.has(t);\n    }\n    set(t, r) {\n        this.headers.set(t, r);\n    }\n    forEach(t, r) {\n        for (let [n, i] of this.headers)t.call(r, i, n, this);\n    }\n};\nvar lm = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, ll = L(\"prisma:client:dataproxyEngine\");\nasync function um(e, t) {\n    let r = al[\"@prisma/engines-version\"], n = t.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && lm.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        if (e.startsWith(\"localhost\") || e.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s] = r.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = cm(`<=${a}.${l}.${u}`), p = await ct(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        ll(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (g) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), g;\n        }\n        return f.version;\n    }\n    throw new lt(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function ul(e, t) {\n    let r = await um(e, t);\n    return ll(\"version\", r), r;\n}\nfunction cm(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar cl = 3, no = L(\"prisma:client:dataproxyEngine\"), io = class {\n    constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = t, this.tracingHelper = r, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: t, interactiveTransaction: r } = {}) {\n        let n = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()), r && (n[\"X-transaction-id\"] = r.id);\n        let i = this.buildCaptureSettings();\n        return i.length > 0 && (n[\"X-capture-telemetry\"] = i.join(\", \")), n;\n    }\n    buildCaptureSettings() {\n        let t = [];\n        return this.tracingHelper.isEnabled() && t.push(\"tracing\"), this.logLevel && t.push(this.logLevel), this.logQueries && t.push(\"query\"), t;\n    }\n}, Dr = class {\n    constructor(t){\n        this.name = \"DataProxyEngine\";\n        ol(t), this.config = t, this.env = {\n            ...t.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }, this.inlineSchema = il(t.inlineSchema), this.inlineDatasources = t.inlineDatasources, this.inlineSchemaHash = t.inlineSchemaHash, this.clientVersion = t.clientVersion, this.engineHash = t.engineVersion, this.logEmitter = t.logEmitter, this.tracingHelper = t.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [t, r] = this.extractHostAndApiKey();\n            this.host = t, this.headerBuilder = new io({\n                apiKey: r,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await ul(t, this.config), no(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(t) {\n        t?.logs?.length && t.logs.forEach((r)=>{\n            switch(r.level){\n                case \"debug\":\n                case \"error\":\n                case \"trace\":\n                case \"warn\":\n                case \"info\":\n                    break;\n                case \"query\":\n                    {\n                        let n = typeof r.attributes.query == \"string\" ? r.attributes.query : \"\";\n                        if (!this.tracingHelper.isEnabled()) {\n                            let [i] = n.split(\"/* traceparent\");\n                            n = i;\n                        }\n                        this.logEmitter.emit(\"query\", {\n                            query: n,\n                            timestamp: sl(r.timestamp),\n                            duration: Number(r.attributes.duration_ms),\n                            params: r.attributes.params,\n                            target: r.attributes.target\n                        });\n                    }\n            }\n        }), t?.traces?.length && this.tracingHelper.createEngineSpan({\n            span: !0,\n            spans: t.traces\n        });\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(t) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t}`;\n    }\n    async uploadSchema() {\n        let t = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(t, async ()=>{\n            let r = await ct(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            r.ok || no(\"schema response status\", r.status);\n            let n = await Or(r, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(t, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: t,\n            traceparent: r,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(t, { traceparent: r, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = Ft(t, n), { batchResult: a, elapsed: l } = await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: r\n        });\n        return a.map((u)=>\"errors\" in u && u.errors.length > 0 ? st(u.errors[0], this.clientVersion, this.config.activeProvider) : {\n                data: u,\n                elapsed: l\n            });\n    }\n    requestInternal({ body: t, traceparent: r, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await ct(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: r,\n                        interactiveTransaction: i\n                    }),\n                    body: JSON.stringify(t),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || no(\"graphql response status\", a.status), await this.handleError(await Or(a, this.clientVersion));\n                let l = await a.json(), u = l.extensions;\n                if (u && this.propagateResponseExtensions(u), l.errors) throw l.errors.length === 1 ? st(l.errors[0], this.config.clientVersion, this.config.activeProvider) : new B(l.errors, {\n                    clientVersion: this.config.clientVersion\n                });\n                return l;\n            }\n        });\n    }\n    async transaction(t, r, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[t]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (t === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await ct(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Or(l, this.clientVersion));\n                    let u = await l.json(), c = u.extensions;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, d = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: d\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${t}`;\n                    o(s);\n                    let a = await ct(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Or(a, this.clientVersion));\n                    let u = (await a.json()).extensions;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let t = {\n            clientVersion: this.clientVersion\n        }, r = Object.keys(this.inlineDatasources)[0], n = Nt({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i;\n        try {\n            i = new URL(n);\n        } catch  {\n            throw new at(`Error validating datasource \\`${r}\\`: the URL must start with the protocol \\`prisma://\\``, t);\n        }\n        let { protocol: o, host: s, searchParams: a } = i;\n        if (o !== \"prisma:\" && o !== \"prisma+postgres:\") throw new at(`Error validating datasource \\`${r}\\`: the URL must start with the protocol \\`prisma://\\``, t);\n        let l = a.get(\"api_key\");\n        if (l === null || l.length < 1) throw new at(`Error validating datasource \\`${r}\\`: the URL must contain a valid API key`, t);\n        return [\n            s,\n            l\n        ];\n    }\n    metrics() {\n        throw new lt(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(t) {\n        for(let r = 0;; r++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${r})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await t.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof se) || !i.isRetryable) throw i;\n                if (r >= cl) throw i instanceof Mt ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${r + 1}/${cl} failed for ${t.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await nl(r);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(t) {\n        if (t instanceof ut) throw await this.uploadSchema(), new Mt({\n            clientVersion: this.clientVersion,\n            cause: t\n        });\n        if (t) throw t;\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction pl(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar so = k(__webpack_require__(/*! os */ \"os\")), dl = k(__webpack_require__(/*! path */ \"path\"));\nvar oo = Symbol(\"PrismaLibraryEngineCache\");\nfunction pm() {\n    let e = globalThis;\n    return e[oo] === void 0 && (e[oo] = {}), e[oo];\n}\nfunction dm(e) {\n    let t = pm();\n    if (t[e] !== void 0) return t[e];\n    let r = dl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = so.default.constants.dlopen.RTLD_LAZY | so.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, r, i), t[e] = n.exports, n.exports;\n}\nvar ml = {\n    async loadLibrary (e) {\n        let t = await Yn(), r = await za(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>dm(r));\n        } catch (n) {\n            let i = ui({\n                e: n,\n                platformInfo: t,\n                id: r\n            });\n            throw new R(i, e.clientVersion);\n        }\n    }\n};\nvar ao, fl = {\n    async loadLibrary (e) {\n        let { clientVersion: t, adapter: r, engineWasm: n } = e;\n        if (r === void 0) throw new R(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${In().prettyName})`, t);\n        if (n === void 0) throw new R(\"WASM engine was unexpectedly `undefined`\", t);\n        ao === void 0 && (ao = (async ()=>{\n            let o = n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new R(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", t);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a);\n            return o.__wbg_set_wasm(l.exports), o.QueryEngine;\n        })());\n        let i = await ao;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar mm = \"P2036\", Ae = L(\"prisma:client:libraryEngine\");\nfunction fm(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction gm(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar gl = [\n    ...Jn,\n    \"native\"\n], _r = class {\n    constructor(t, r){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = r ?? ml, t.engineWasm !== void 0 && (this.libraryLoader = r ?? fl), this.config = t, this.libraryStarted = !1, this.logQueries = t.logQueries ?? !1, this.logLevel = t.logLevel ?? \"error\", this.logEmitter = t.logEmitter, this.datamodel = t.inlineSchema, t.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(t.overrideDatasources)[0], i = t.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(t, r, n) {\n        await this.start();\n        let i = JSON.stringify(r), o;\n        if (t === \"start\") {\n            let a = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            o = await this.engine?.startTransaction(a, i);\n        } else t === \"commit\" ? o = await this.engine?.commitTransaction(n.id, i) : t === \"rollback\" && (o = await this.engine?.rollbackTransaction(n.id, i));\n        let s = this.parseEngineResponse(o);\n        if (hm(s)) {\n            let a = this.getExternalAdapterError(s);\n            throw a ? a.error : new V(s.message, {\n                code: s.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: s.meta\n            });\n        }\n        return s;\n    }\n    async instantiateLibrary() {\n        if (Ae(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        Qn(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.loadEngine(), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let t = await nt();\n            if (!gl.includes(t)) throw new R(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(H(t))}. Possible binaryTargets: ${qe(gl.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return t;\n        }\n    }\n    parseEngineResponse(t) {\n        if (!t) throw new B(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(t);\n        } catch  {\n            throw new B(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let t = new WeakRef(this), { adapter: r } = this.config;\n                r && Ae(\"Using driver adapter: %O\", r), this.engine = new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\"\n                }, (n)=>{\n                    t.deref()?.logger(n);\n                }, r);\n            } catch (t) {\n                let r = t, n = this.parseInitError(r.message);\n                throw typeof n == \"string\" ? r : new R(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(t) {\n        let r = this.parseEngineResponse(t);\n        if (r) {\n            if (\"span\" in r) {\n                this.config.tracingHelper.createEngineSpan(r);\n                return;\n            }\n            r.level = r?.level.toLowerCase() ?? \"unknown\", fm(r) ? this.logEmitter.emit(\"query\", {\n                timestamp: new Date,\n                query: r.query,\n                params: r.params,\n                duration: Number(r.duration_ms),\n                target: r.module_path\n            }) : gm(r) ? this.loggerRustPanic = new le(lo(this, `${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`), this.config.clientVersion) : this.logEmitter.emit(r.level, {\n                timestamp: new Date,\n                message: r.message,\n                target: r.module_path\n            });\n        }\n    }\n    parseInitError(t) {\n        try {\n            return JSON.parse(t);\n        } catch  {}\n        return t;\n    }\n    parseRequestError(t) {\n        try {\n            return JSON.parse(t);\n        } catch  {}\n        return t;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ae(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let t = async ()=>{\n            Ae(\"library starting\");\n            try {\n                let r = {\n                    traceparent: this.config.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(r)), this.libraryStarted = !0, Ae(\"library started\");\n            } catch (r) {\n                let n = this.parseInitError(r.message);\n                throw typeof n == \"string\" ? r : new R(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan(\"connect\", t), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ae(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let t = async ()=>{\n            await new Promise((n)=>setTimeout(n, 5)), Ae(\"library stopping\");\n            let r = {\n                traceparent: this.config.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(r)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, Ae(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan(\"disconnect\", t), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(t) {\n        return this.library?.debugPanic(t);\n    }\n    async request(t, { traceparent: r, interactiveTransaction: n }) {\n        Ae(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: r\n        }), o = JSON.stringify(t);\n        try {\n            await this.start(), this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let s = this.parseEngineResponse(await this.executingQueryPromise);\n            if (s.errors) throw s.errors.length === 1 ? this.buildQueryError(s.errors[0]) : new B(JSON.stringify(s.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: s,\n                elapsed: 0\n            };\n        } catch (s) {\n            if (s instanceof R) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new le(lo(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new B(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(t, { transaction: r, traceparent: n }) {\n        Ae(\"requestBatch\");\n        let i = Ft(t, r);\n        await this.start(), this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), pl(r));\n        let o = await this.executingQueryPromise, s = this.parseEngineResponse(o);\n        if (s.errors) throw s.errors.length === 1 ? this.buildQueryError(s.errors[0]) : new B(JSON.stringify(s.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: a, errors: l } = s;\n        if (Array.isArray(a)) return a.map((u)=>u.errors && u.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u.errors[0]) : {\n                data: u,\n                elapsed: 0\n            });\n        throw l && l.length === 1 ? new Error(l[0].error) : new Error(JSON.stringify(s));\n    }\n    buildQueryError(t) {\n        if (t.user_facing_error.is_panic) return new le(lo(this, t.user_facing_error.message), this.config.clientVersion);\n        let r = this.getExternalAdapterError(t.user_facing_error);\n        return r ? r.error : st(t, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(t) {\n        if (t.error_code === mm && this.config.adapter) {\n            let r = t.meta?.id;\n            Yr(typeof r == \"number\", \"Malformed external JS error received from the engine\");\n            let n = this.config.adapter.errorRegistry.consumeError(r);\n            return Yr(n, \"External error with reported id was not registered\"), n;\n        }\n    }\n    async metrics(t) {\n        await this.start();\n        let r = await this.engine.metrics(JSON.stringify(t));\n        return t.format === \"prometheus\" ? r : this.parseEngineResponse(r);\n    }\n};\nfunction hm(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction lo(e, t) {\n    return rl({\n        binaryTarget: e.binaryTarget,\n        title: t,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction hl({ copyEngine: e = !0 }, t) {\n    let r;\n    try {\n        r = Nt({\n            inlineDatasources: t.inlineDatasources,\n            overrideDatasources: t.overrideDatasources,\n            env: {\n                ...t.env,\n                ...process.env\n            },\n            clientVersion: t.clientVersion\n        });\n    } catch  {}\n    let n = !!(r?.startsWith(\"prisma://\") || r?.startsWith(\"prisma+postgres://\"));\n    e && n && tr(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let i = Yt(t.generator), o = n || !e, s = !!t.adapter, a = i === \"library\", l = i === \"binary\";\n    if (o && s || s && !1) {\n        let u;\n        throw e ? r?.startsWith(\"prisma://\") ? u = [\n            \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n            \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n        ] : u = [\n            \"Prisma Client was configured to use both the `adapter` and Accelerate, please chose one.\"\n        ] : u = [\n            \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n            \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n        ], new J(u.join(`\n`), {\n            clientVersion: t.clientVersion\n        });\n    }\n    if (o) return new Dr(t);\n    if (a) return new _r(t);\n    throw new J(\"Invalid client engine type, please use `library` or `binary`\", {\n        clientVersion: t.clientVersion\n    });\n}\nfunction Fn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar yl = (e)=>({\n        command: e\n    });\nvar bl = (e)=>e.strings.reduce((t, r, n)=>`${t}@P${n}${r}`);\nfunction jt(e) {\n    try {\n        return El(e, \"fast\");\n    } catch  {\n        return El(e, \"slow\");\n    }\n}\nfunction El(e, t) {\n    return JSON.stringify(e.map((r)=>xl(r, t)));\n}\nfunction xl(e, t) {\n    return Array.isArray(e) ? e.map((r)=>xl(r, t)) : typeof e == \"bigint\" ? {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    } : Pt(e) ? {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    } : xe.isDecimal(e) ? {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    } : Buffer.isBuffer(e) ? {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    } : ym(e) || ArrayBuffer.isView(e) ? {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    } : typeof e == \"object\" && t === \"slow\" ? Pl(e) : e;\n}\nfunction ym(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Pl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(wl);\n    let t = {};\n    for (let r of Object.keys(e))t[r] = wl(e[r]);\n    return t;\n}\nfunction wl(e) {\n    return typeof e == \"bigint\" ? e.toString() : Pl(e);\n}\nvar bm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], vl = bm;\nvar Em = /^(\\s*alter\\s)/i, Tl = L(\"prisma:client\");\nfunction uo(e, t, r, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && r.length > 0 && Em.exec(t)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar co = ({ clientMethod: e, activeProvider: t })=>(r)=>{\n        let n = \"\", i;\n        if (pa(r)) n = r.sql, i = {\n            values: jt(r.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(r)) {\n            let [o, ...s] = r;\n            n = o, i = {\n                values: jt(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(t){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = r.sql, i = {\n                        values: jt(r.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = r.text, i = {\n                        values: jt(r.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = bl(r), i = {\n                        values: jt(r.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${t} provider does not support ${e}`);\n        }\n        return i?.values ? Tl(`prisma.${e}(${n}, ${i.values})`) : Tl(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Rl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [t, ...r] = e;\n        return new oe(t, r);\n    }\n}, Cl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction po(e) {\n    return function(r) {\n        let n, i = (o = e)=>{\n            try {\n                return o === void 0 || o?.kind === \"itx\" ? n ??= Sl(r(o)) : Sl(r(o));\n            } catch (s) {\n                return Promise.reject(s);\n            }\n        };\n        return {\n            then (o, s) {\n                return i().then(o, s);\n            },\n            catch (o) {\n                return i().catch(o);\n            },\n            finally (o) {\n                return i().finally(o);\n            },\n            requestTransaction (o) {\n                let s = i(o);\n                return s.requestTransaction ? s.requestTransaction(o) : s;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Sl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Al = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    async createEngineSpan () {},\n    getActiveContext () {},\n    runInChildSpan (e, t) {\n        return t();\n    }\n}, mo = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(t) {\n        return this.getGlobalTracingHelper().getTraceParent(t);\n    }\n    createEngineSpan(t) {\n        return this.getGlobalTracingHelper().createEngineSpan(t);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(t, r) {\n        return this.getGlobalTracingHelper().runInChildSpan(t, r);\n    }\n    getGlobalTracingHelper() {\n        return globalThis.PRISMA_INSTRUMENTATION?.helper ?? Al;\n    }\n};\nfunction Il(e) {\n    return e.includes(\"tracing\") ? new mo : Al;\n}\nfunction Ol(e, t = ()=>{}) {\n    let r, n = new Promise((i)=>r = i);\n    return {\n        then (i) {\n            return --e === 0 && r(t()), i?.(n);\n        }\n    };\n}\nfunction kl(e) {\n    return typeof e == \"string\" ? e : e.reduce((t, r)=>{\n        let n = typeof r == \"string\" ? r : r.level;\n        return n === \"query\" ? t : t && (r === \"info\" || t === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar Ln = class {\n    constructor(){\n        this._middlewares = [];\n    }\n    use(t) {\n        this._middlewares.push(t);\n    }\n    get(t) {\n        return this._middlewares[t];\n    }\n    has(t) {\n        return !!this._middlewares[t];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n};\nvar Fl = k(bi());\nfunction Nn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction Dl(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let t = [];\n    return e.modelName && t.push(e.modelName), e.query.arguments && t.push(fo(e.query.arguments)), t.push(fo(e.query.selection)), t.join(\"\");\n}\nfunction fo(e) {\n    return `(${Object.keys(e).sort().map((r)=>{\n        let n = e[r];\n        return typeof n == \"object\" && n !== null ? `(${r} ${fo(n)})` : r;\n    }).join(\" \")})`;\n}\nvar wm = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction go(e) {\n    return wm[e];\n}\nvar Mn = class {\n    constructor(t){\n        this.options = t;\n        this.tickActive = !1;\n        this.batches = {};\n    }\n    request(t) {\n        let r = this.options.batchBy(t);\n        return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[r].push({\n                request: t,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(t);\n    }\n    dispatchBatches() {\n        for(let t in this.batches){\n            let r = this.batches[t];\n            delete this.batches[t], r.length === 1 ? this.options.singleLoader(r[0].request).then((n)=>{\n                n instanceof Error ? r[0].reject(n) : r[0].resolve(n);\n            }).catch((n)=>{\n                r[0].reject(n);\n            }) : (r.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(r.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < r.length; i++)r[i].reject(n);\n                else for(let i = 0; i < r.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? r[i].reject(o) : r[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < r.length; i++)r[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction pt(e, t) {\n    if (t === null) return t;\n    switch(e){\n        case \"bigint\":\n            return BigInt(t);\n        case \"bytes\":\n            return Buffer.from(t, \"base64\");\n        case \"decimal\":\n            return new xe(t);\n        case \"datetime\":\n        case \"date\":\n            return new Date(t);\n        case \"time\":\n            return new Date(`1970-01-01T${t}Z`);\n        case \"bigint-array\":\n            return t.map((r)=>pt(\"bigint\", r));\n        case \"bytes-array\":\n            return t.map((r)=>pt(\"bytes\", r));\n        case \"decimal-array\":\n            return t.map((r)=>pt(\"decimal\", r));\n        case \"datetime-array\":\n            return t.map((r)=>pt(\"datetime\", r));\n        case \"date-array\":\n            return t.map((r)=>pt(\"date\", r));\n        case \"time-array\":\n            return t.map((r)=>pt(\"time\", r));\n        default:\n            return t;\n    }\n}\nfunction _l(e) {\n    let t = [], r = xm(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...r\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = pt(e.types[s], i[s]);\n        t.push(o);\n    }\n    return t;\n}\nfunction xm(e) {\n    let t = {};\n    for(let r = 0; r < e.columns.length; r++)t[e.columns[r]] = null;\n    return t;\n}\nvar Pm = L(\"prisma:client:request_handler\"), $n = class {\n    constructor(t, r){\n        this.logEmitter = r, this.client = t, this.dataloader = new Mn({\n            batchLoader: Ma(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>go(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: vm(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? Ll(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: go(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : Dl(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(t) {\n        try {\n            return await this.dataloader.request(t);\n        } catch (r) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = t;\n            this.handleAndLogRequestError({\n                error: r,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: t.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: t, unpacker: r }, n) {\n        let i = n?.data, o = n?.elapsed, s = this.unpack(i, t, r);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: s,\n            elapsed: o\n        } : s;\n    }\n    handleAndLogRequestError(t) {\n        try {\n            this.handleRequestError(t);\n        } catch (r) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: r.message,\n                target: t.clientMethod,\n                timestamp: new Date\n            }), r;\n        }\n    }\n    handleRequestError({ error: t, clientMethod: r, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Pm(t), Tm(t, i) || t instanceof Le) throw t;\n        if (t instanceof V && Rm(t)) {\n            let u = Nl(t.meta);\n            wn({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: r,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = t.message;\n        if (n && (l = Tt({\n            callsite: n,\n            originalMethod: r,\n            isPanic: t.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), t.code) {\n            let u = s ? {\n                modelName: s,\n                ...t.meta\n            } : t.meta;\n            throw new V(l, {\n                code: t.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: t.batchRequestIdx\n            });\n        } else {\n            if (t.isPanic) throw new le(l, this.client._clientVersion);\n            if (t instanceof B) throw new B(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: t.batchRequestIdx\n            });\n            if (t instanceof R) throw new R(l, this.client._clientVersion);\n            if (t instanceof le) throw new le(l, this.client._clientVersion);\n        }\n        throw t.clientVersion = this.client._clientVersion, t;\n    }\n    sanitizeMessage(t) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, Fl.default)(t) : t;\n    }\n    unpack(t, r, n) {\n        if (!t || (t.data && (t = t.data), !t)) return t;\n        let i = Object.keys(t)[0], o = Object.values(t)[0], s = r.filter((u)=>u !== \"select\" && u !== \"include\"), a = Gi(o, s), l = i === \"queryRaw\" ? _l(a) : wt(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction vm(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Ll(e)\n        };\n        Fe(e, \"Unknown transaction kind\");\n    }\n}\nfunction Ll(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction Tm(e, t) {\n    return Nn(e) && t?.kind === \"batch\" && e.batchRequestIdx !== t.index;\n}\nfunction Rm(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction Nl(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(Nl)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...t] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: t\n        };\n    }\n    return e;\n}\nvar Ml = \"5.22.0\";\nvar $l = Ml;\nvar Ul = k(Ai());\nvar F = class extends Error {\n    constructor(t){\n        super(t + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nw(F, \"PrismaClientConstructorValidationError\");\nvar ql = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], jl = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], Vl = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Sm = {\n    datasources: (e, { datasourceNames: t })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new F(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [r, n] of Object.entries(e)){\n                if (!t.includes(r)) {\n                    let i = Vt(r, t) || ` Available datasources: ${t.join(\", \")}`;\n                    throw new F(`Unknown datasource ${r} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new F(`Invalid value ${JSON.stringify(e)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new F(`Invalid value ${JSON.stringify(e)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new F(`Invalid value ${JSON.stringify(o)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, t)=>{\n        if (e === null) return;\n        if (e === void 0) throw new F('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Fn(t).includes(\"driverAdapters\")) throw new F('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Yt() === \"binary\") throw new F('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new F(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new F(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!jl.includes(e)) {\n                let t = Vt(e, jl);\n                throw new F(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new F(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function t(r) {\n            if (typeof r == \"string\" && !Vl.includes(r)) {\n                let n = Vt(r, Vl);\n                throw new F(`Invalid log level \"${r}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let r of e){\n            t(r);\n            let n = {\n                level: t,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Vt(i, o);\n                        throw new F(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (r && typeof r == \"object\") for (let [i, o] of Object.entries(r))if (n[i]) n[i](o);\n            else throw new F(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let t = e.maxWait;\n        if (t != null && t <= 0) throw new F(`Invalid value ${t} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let r = e.timeout;\n        if (r != null && r <= 0) throw new F(`Invalid value ${r} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, t)=>{\n        if (typeof e != \"object\") throw new F('\"omit\" option is expected to be an object.');\n        if (e === null) throw new F('\"omit\" option can not be `null`');\n        let r = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = Im(n, t.runtimeDataModel);\n            if (!o) {\n                r.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    r.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    r.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && r.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (r.length > 0) throw new F(Om(e, r));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let t = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new F(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [r] of Object.entries(e))if (!t.includes(r)) {\n            let n = Vt(r, t);\n            throw new F(`Invalid property ${JSON.stringify(r)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction Gl(e, t) {\n    for (let [r, n] of Object.entries(e)){\n        if (!ql.includes(r)) {\n            let i = Vt(r, ql);\n            throw new F(`Unknown property ${r} provided to PrismaClient constructor.${i}`);\n        }\n        Sm[r](n, t);\n    }\n    if (e.datasourceUrl && e.datasources) throw new F('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Vt(e, t) {\n    if (t.length === 0 || typeof e != \"string\") return \"\";\n    let r = Am(e, t);\n    return r ? ` Did you mean \"${r}\"?` : \"\";\n}\nfunction Am(e, t) {\n    if (t.length === 0) return null;\n    let r = t.map((i)=>({\n            value: i,\n            distance: (0, Ul.default)(e, i)\n        }));\n    r.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = r[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction Im(e, t) {\n    return Bl(t.models, e) ?? Bl(t.types, e);\n}\nfunction Bl(e, t) {\n    let r = Object.keys(e).find((n)=>xt(n) === t);\n    if (r) return e[r];\n}\nfunction Om(e, t) {\n    let r = Ot(e);\n    for (let o of t)switch(o.kind){\n        case \"UnknownModel\":\n            r.arguments.getField(o.modelKey)?.markAsError(), r.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            r.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), r.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            r.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), r.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            r.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), r.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = En(r, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction Ql(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((t, r)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? r(i) : t(n)));\n        }, l = (u)=>{\n            o || (o = !0, r(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!Nn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar tt = L(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar km = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, Dm = Symbol.for(\"prisma.client.transaction.id\"), _m = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction Yl(e) {\n    class t {\n        constructor(n){\n            this._originalClient = this;\n            this._middlewares = new Ln;\n            this._createPrismaPromise = po();\n            this.$extends = Ia;\n            e = n?.__internal?.configOverride?.(e) ?? e, Ba(e), n && Gl(n, e);\n            let i = new Kl.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = kt.empty(), this._previewFeatures = Fn(e), this._clientVersion = e.clientVersion ?? $l, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Il(this._previewFeatures);\n            let o = {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && Fr.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Fr.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = qi(n.adapter);\n                let l = e.activeProvider === \"postgresql\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new R(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new R(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && zt(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && L.enable(\"prisma:client\");\n                let p = Fr.default.resolve(e.dirname, e.relativePath);\n                zl.default.existsSync(p) || (p = e.dirname), tt(\"dirname\", e.dirname), tt(\"relativePath\", e.relativePath), tt(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    datamodelPath: Fr.default.join(e.dirname, e.filename ?? \"schema.prisma\"),\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && kl(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: Ua(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: Nt,\n                        getBatchRequestPayload: Ft,\n                        prismaGraphQLToJSError: st,\n                        PrismaClientUnknownRequestError: B,\n                        PrismaClientInitializationError: R,\n                        PrismaClientKnownRequestError: V,\n                        debug: L(\"prisma:client:accelerateEngine\"),\n                        engineVersion: Wl.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, tt(\"clientVersion\", e.clientVersion), this._engine = hl(e, this._engineConfig), this._requestHandler = new $n(this, i), l.log) for (let f of l.log){\n                    let g = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    g && this.$on(g, (h)=>{\n                        er.log(`${er.tags[g] ?? \"\"}`, h.message || h.query);\n                    });\n                }\n                this._metrics = new Dt(this._engine);\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = yr(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i);\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Ao();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: co({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = Jl(n, i);\n                    return uo(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new J(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(uo(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new J(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: yl,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: co({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...Jl(n, i));\n                throw new J(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new J(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = _m.nextId(), s = Ol(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return Ql(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return yr(Se(Aa(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                re(\"_createPrismaPromise\", ()=>po(n)),\n                re(Dm, ()=>n.id),\n                _t(vl)\n            ]));\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? km, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (O)=>c(u, (T)=>(O?.end(), l(T))));\n                let { runInTransaction: p, args: d, ...f } = u, g = {\n                    ...n,\n                    ...f\n                };\n                d && (g.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === !1 && delete g.transaction;\n                let h = await Na(this, g);\n                return g.model ? Da({\n                    result: h,\n                    modelName: g.model,\n                    args: g.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : h;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new Hl.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let g = {\n                    name: \"serialize\"\n                }, h = this._tracingHelper.runInChildSpan(g, ()=>vn({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return L.enabled(\"prisma:client\") && (tt(\"Prisma Client call:\"), tt(`prisma.${i}(${ha(n)})`), tt(\"Generated request:\"), tt(JSON.stringify(h, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: h,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f\n                });\n            } catch (g) {\n                throw g.clientVersion = this._clientVersion, g;\n            }\n        }\n        get $metrics() {\n            if (!this._hasPreviewFlag(\"metrics\")) throw new J(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n                clientVersion: this._clientVersion\n            });\n            return this._metrics;\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return t;\n}\nfunction Jl(e, t) {\n    return Fm(e) ? [\n        new oe(e, t),\n        Rl\n    ] : [\n        e,\n        Cl\n    ];\n}\nfunction Fm(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar Lm = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction Zl(e) {\n    return new Proxy(e, {\n        get (t, r) {\n            if (r in t) return t[r];\n            if (!Lm.has(r)) throw new TypeError(`Invalid enum value: ${String(r)}`);\n        }\n    });\n}\nfunction Xl(e) {\n    zt(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../packages/db/generated/prisma/runtime/library.js\n");

/***/ }),

/***/ "(rsc)/../packages/db/src/client.ts":
/*!************************************!*\
  !*** ../packages/db/src/client.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generated/prisma */ \"(rsc)/../packages/db/generated/prisma/index.js\");\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_generated_prisma__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = globalThis.prisma ?? new _generated_prisma__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) globalThis.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vcGFja2FnZXMvZGIvc3JjL2NsaWVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUQ7QUFPNUMsTUFBTUMsU0FDWEMsV0FBV0QsTUFBTSxJQUNqQixJQUFJRCwyREFBWUEsQ0FBQztJQUNmRyxLQUNFQyxLQUFzQyxHQUNsQztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQzFCLENBQVM7QUFDakIsR0FBRztBQUVMLElBQUlBLElBQXFDLEVBQUVGLFdBQVdELE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFuZ1xcRG9jdW1lbnRzXFx3ZWItZGV2LXByb2plY3RzXFxmb29kLWZvci10aG91Z2h0LTIuMFxccGFja2FnZXNcXGRiXFxzcmNcXGNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tIFwiLi4vZ2VuZXJhdGVkL3ByaXNtYVwiO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcclxuICB2YXIgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwcmlzbWEgPVxyXG4gIGdsb2JhbFRoaXMucHJpc21hID8/XHJcbiAgbmV3IFByaXNtYUNsaWVudCh7XHJcbiAgICBsb2c6XHJcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCJcclxuICAgICAgICA/IFtcInF1ZXJ5XCIsIFwiZXJyb3JcIiwgXCJ3YXJuXCJdXHJcbiAgICAgICAgOiBbXCJlcnJvclwiXSxcclxuICB9KTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIGdsb2JhbFRoaXMucHJpc21hID0gcHJpc21hO1xyXG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwicHJpc21hIiwiZ2xvYmFsVGhpcyIsImxvZyIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../packages/db/src/client.ts\n");

/***/ }),

/***/ "(rsc)/../packages/db/src/index.ts":
/*!***********************************!*\
  !*** ../packages/db/src/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.prisma)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/../packages/db/src/client.ts\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vcGFja2FnZXMvZGIvc3JjL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhbmdcXERvY3VtZW50c1xcd2ViLWRldi1wcm9qZWN0c1xcZm9vZC1mb3ItdGhvdWdodC0yLjBcXHBhY2thZ2VzXFxkYlxcc3JjXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiLi9jbGllbnRcIjtcclxuXHJcbmV4cG9ydCB0eXBlIHsgUHJpc21hLCBVc2VyIH0gZnJvbSBcIi4uL2dlbmVyYXRlZC9wcmlzbWFcIjtcclxuIl0sIm5hbWVzIjpbInByaXNtYSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../packages/db/src/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/me/route.ts":
/*!*********************************!*\
  !*** ./src/app/api/me/route.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(rsc)/../node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(rsc)/../node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../node_modules/next/dist/api/server.js\");\n/* harmony import */ var _fft_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fft/db */ \"(rsc)/../packages/db/src/index.ts\");\n\n\n\nasync function GET() {\n    const { userId } = await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_2__.auth)();\n    if (!userId) return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(\"Unauthorized\", {\n        status: 401\n    });\n    const user = await (await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__.clerkClient)()).users.getUser(userId);\n    const primaryEmail = user.emailAddresses.find((e)=>e.id === user.primaryEmailAddressId)?.emailAddress ?? user.emailAddresses[0]?.emailAddress;\n    if (!primaryEmail) return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(\"No email on file for this Clerk user.\", {\n        status: 422\n    });\n    if (!user.username) return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(\"Username is required.\", {\n        status: 422\n    });\n    const dbUser = await _fft_db__WEBPACK_IMPORTED_MODULE_1__.prisma.user.upsert({\n        where: {\n            clerkId: userId\n        },\n        update: {\n            email: primaryEmail\n        },\n        create: {\n            clerkId: userId,\n            email: primaryEmail,\n            username: user.username\n        }\n    });\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        userId,\n        profile: {\n            id: dbUser.id,\n            clerkId: dbUser.clerkId,\n            email: dbUser.email,\n            username: dbUser.username,\n            createdAt: dbUser.createdAt,\n            updatedAt: dbUser.updatedAt\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9tZS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5RDtBQUNkO0FBQ1Y7QUFFMUIsZUFBZUk7SUFDcEIsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBRyxNQUFNTCwwREFBSUE7SUFDN0IsSUFBSSxDQUFDSyxRQUFRLE9BQU8sSUFBSUgscURBQVlBLENBQUMsZ0JBQWdCO1FBQUVJLFFBQVE7SUFBSTtJQUVuRSxNQUFNQyxPQUFPLE1BQU0sQ0FBQyxNQUFNTixpRUFBV0EsRUFBQyxFQUFHTyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0o7SUFDdkQsTUFBTUssZUFDSkgsS0FBS0ksY0FBYyxDQUFDQyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsRUFBRSxLQUFLUCxLQUFLUSxxQkFBcUIsR0FDL0RDLGdCQUFnQlQsS0FBS0ksY0FBYyxDQUFDLEVBQUUsRUFBRUs7SUFFOUMsSUFBSSxDQUFDTixjQUNILE9BQU8sSUFBSVIscURBQVlBLENBQUMseUNBQXlDO1FBQy9ESSxRQUFRO0lBQ1Y7SUFFRixJQUFJLENBQUNDLEtBQUtVLFFBQVEsRUFDaEIsT0FBTyxJQUFJZixxREFBWUEsQ0FBQyx5QkFBeUI7UUFBRUksUUFBUTtJQUFJO0lBRWpFLE1BQU1ZLFNBQVMsTUFBTWYsMkNBQU1BLENBQUNJLElBQUksQ0FBQ1ksTUFBTSxDQUFDO1FBQ3RDQyxPQUFPO1lBQUVDLFNBQVNoQjtRQUFPO1FBQ3pCaUIsUUFBUTtZQUFFQyxPQUFPYjtRQUFhO1FBQzlCYyxRQUFRO1lBQUVILFNBQVNoQjtZQUFRa0IsT0FBT2I7WUFBY08sVUFBVVYsS0FBS1UsUUFBUTtRQUFDO0lBQzFFO0lBRUEsT0FBT2YscURBQVlBLENBQUN1QixJQUFJLENBQUM7UUFDdkJwQjtRQUNBcUIsU0FBUztZQUNQWixJQUFJSSxPQUFPSixFQUFFO1lBQ2JPLFNBQVNILE9BQU9HLE9BQU87WUFDdkJFLE9BQU9MLE9BQU9LLEtBQUs7WUFDbkJOLFVBQVVDLE9BQU9ELFFBQVE7WUFDekJVLFdBQVdULE9BQU9TLFNBQVM7WUFDM0JDLFdBQVdWLE9BQU9VLFNBQVM7UUFDN0I7SUFDRjtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhbmdcXERvY3VtZW50c1xcd2ViLWRldi1wcm9qZWN0c1xcZm9vZC1mb3ItdGhvdWdodC0yLjBcXHdlYlxcc3JjXFxhcHBcXGFwaVxcbWVcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF1dGgsIGNsZXJrQ2xpZW50IH0gZnJvbSBcIkBjbGVyay9uZXh0anMvc2VydmVyXCI7XHJcbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xyXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiQGZmdC9kYlwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcclxuICBjb25zdCB7IHVzZXJJZCB9ID0gYXdhaXQgYXV0aCgpO1xyXG4gIGlmICghdXNlcklkKSByZXR1cm4gbmV3IE5leHRSZXNwb25zZShcIlVuYXV0aG9yaXplZFwiLCB7IHN0YXR1czogNDAxIH0pO1xyXG5cclxuICBjb25zdCB1c2VyID0gYXdhaXQgKGF3YWl0IGNsZXJrQ2xpZW50KCkpLnVzZXJzLmdldFVzZXIodXNlcklkKTtcclxuICBjb25zdCBwcmltYXJ5RW1haWwgPVxyXG4gICAgdXNlci5lbWFpbEFkZHJlc3Nlcy5maW5kKChlKSA9PiBlLmlkID09PSB1c2VyLnByaW1hcnlFbWFpbEFkZHJlc3NJZClcclxuICAgICAgPy5lbWFpbEFkZHJlc3MgPz8gdXNlci5lbWFpbEFkZHJlc3Nlc1swXT8uZW1haWxBZGRyZXNzO1xyXG5cclxuICBpZiAoIXByaW1hcnlFbWFpbClcclxuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKFwiTm8gZW1haWwgb24gZmlsZSBmb3IgdGhpcyBDbGVyayB1c2VyLlwiLCB7XHJcbiAgICAgIHN0YXR1czogNDIyLFxyXG4gICAgfSk7XHJcblxyXG4gIGlmICghdXNlci51c2VybmFtZSlcclxuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKFwiVXNlcm5hbWUgaXMgcmVxdWlyZWQuXCIsIHsgc3RhdHVzOiA0MjIgfSk7XHJcblxyXG4gIGNvbnN0IGRiVXNlciA9IGF3YWl0IHByaXNtYS51c2VyLnVwc2VydCh7XHJcbiAgICB3aGVyZTogeyBjbGVya0lkOiB1c2VySWQgfSxcclxuICAgIHVwZGF0ZTogeyBlbWFpbDogcHJpbWFyeUVtYWlsIH0sXHJcbiAgICBjcmVhdGU6IHsgY2xlcmtJZDogdXNlcklkLCBlbWFpbDogcHJpbWFyeUVtYWlsLCB1c2VybmFtZTogdXNlci51c2VybmFtZSB9LFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgdXNlcklkLFxyXG4gICAgcHJvZmlsZToge1xyXG4gICAgICBpZDogZGJVc2VyLmlkLFxyXG4gICAgICBjbGVya0lkOiBkYlVzZXIuY2xlcmtJZCxcclxuICAgICAgZW1haWw6IGRiVXNlci5lbWFpbCxcclxuICAgICAgdXNlcm5hbWU6IGRiVXNlci51c2VybmFtZSxcclxuICAgICAgY3JlYXRlZEF0OiBkYlVzZXIuY3JlYXRlZEF0LFxyXG4gICAgICB1cGRhdGVkQXQ6IGRiVXNlci51cGRhdGVkQXQsXHJcbiAgICB9LFxyXG4gIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJhdXRoIiwiY2xlcmtDbGllbnQiLCJOZXh0UmVzcG9uc2UiLCJwcmlzbWEiLCJHRVQiLCJ1c2VySWQiLCJzdGF0dXMiLCJ1c2VyIiwidXNlcnMiLCJnZXRVc2VyIiwicHJpbWFyeUVtYWlsIiwiZW1haWxBZGRyZXNzZXMiLCJmaW5kIiwiZSIsImlkIiwicHJpbWFyeUVtYWlsQWRkcmVzc0lkIiwiZW1haWxBZGRyZXNzIiwidXNlcm5hbWUiLCJkYlVzZXIiLCJ1cHNlcnQiLCJ3aGVyZSIsImNsZXJrSWQiLCJ1cGRhdGUiLCJlbWFpbCIsImNyZWF0ZSIsImpzb24iLCJwcm9maWxlIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/me/route.ts\n");

/***/ }),

/***/ "(ssr)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "async_hooks":
/*!******************************!*\
  !*** external "async_hooks" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@clerk","vendor-chunks/next","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fme%2Froute&page=%2Fapi%2Fme%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fme%2Froute.ts&appDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdang%5CDocuments%5Cweb-dev-projects%5Cfood-for-thought-2.0%5Cweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();